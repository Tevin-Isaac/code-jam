{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationServiceStatusState = exports.AttestationsWrapper = exports.AttestationState = exports.getSecurityCodePrefix = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar async_1 = require(\"@celo/base/lib/async\");\n\nvar collections_1 = require(\"@celo/base/lib/collections\");\n\nvar parsing_1 = require(\"@celo/base/lib/parsing\");\n\nvar string_1 = require(\"@celo/base/lib/string\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar lib_1 = require(\"@celo/utils/lib\");\n\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\n\nvar base_1 = require(\"../base\");\n\nvar identity_1 = require(\"../identity\");\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n\nfunction hashAddressToSingleDigit(address) {\n  return new bignumber_js_1.default(address.toLowerCase()).modulo(10).toNumber();\n}\n\nfunction getSecurityCodePrefix(issuerAddress) {\n  return \"\" + hashAddressToSingleDigit(issuerAddress);\n}\n\nexports.getSecurityCodePrefix = getSecurityCodePrefix;\n/**\n * Contract for managing identities\n */\n\nvar AttestationState;\n\n(function (AttestationState) {\n  AttestationState[AttestationState[\"None\"] = 0] = \"None\";\n  AttestationState[AttestationState[\"Incomplete\"] = 1] = \"Incomplete\";\n  AttestationState[AttestationState[\"Complete\"] = 2] = \"Complete\";\n})(AttestationState = exports.AttestationState || (exports.AttestationState = {}));\n\nfunction parseGetCompletableAttestations(response) {\n  var metadataURLs = (0, parsing_1.parseSolidityStringArray)(response[2].map(BaseWrapper_1.valueToInt), response[3]);\n  return (0, collections_1.zip3)(response[0].map(BaseWrapper_1.valueToInt), response[1], metadataURLs).map(function (_a) {\n    var blockNumber = _a[0],\n        issuer = _a[1],\n        metadataURL = _a[2];\n    return {\n      blockNumber: blockNumber,\n      issuer: issuer,\n      metadataURL: metadataURL\n    };\n  });\n}\n\nvar AttestationsWrapper =\n/** @class */\nfunction (_super) {\n  __extends(AttestationsWrapper, _super);\n\n  function AttestationsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     *  Returns the time an attestation can be completable before it is considered expired\n     */\n\n\n    _this.attestationExpiryBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationExpiryBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Returns the attestation request fee in a given currency.\n     * @param address Token address.\n     * @returns The fee as big number.\n     */\n\n    _this.attestationRequestFees = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationRequestFees, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.selectIssuersWaitBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.selectIssuersWaitBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * @notice Returns the unselected attestation request for an identifier/account pair, if any.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n    _this.getUnselectedRequest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUnselectedRequest, undefined, function (res) {\n      return {\n        blockNumber: (0, BaseWrapper_1.valueToInt)(res[0]),\n        attestationsRequested: (0, BaseWrapper_1.valueToInt)(res[1]),\n        attestationRequestFeeToken: res[2]\n      };\n    });\n    /**\n     * @notice Checks if attestation request is expired.\n     * @param attestationRequestBlockNumber Attestation Request Block Number to be checked\n     */\n\n    _this.isAttestationExpired = function (attestationRequestBlockNumber) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var attestationExpiryBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.attestationExpiryBlocks()];\n\n            case 1:\n              attestationExpiryBlocks = _a.sent();\n              return [4\n              /*yield*/\n              , this.kit.connection.getBlockNumber()];\n\n            case 2:\n              blockNumber = _a.sent();\n              return [2\n              /*return*/\n              , blockNumber >= attestationRequestBlockNumber + attestationExpiryBlocks];\n          }\n        });\n      });\n    };\n    /**\n     * @notice Waits for appropriate block numbers for before issuer can be selected\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n\n    _this.waitForSelectingIssuers = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n      if (timeoutSeconds === void 0) {\n        timeoutSeconds = 120;\n      }\n\n      if (pollDurationSeconds === void 0) {\n        pollDurationSeconds = 1;\n      }\n\n      return __awaiter(_this, void 0, void 0, function () {\n        var startTime, unselectedRequest, waitBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              startTime = Date.now();\n              return [4\n              /*yield*/\n              , this.getUnselectedRequest(identifier, account)];\n\n            case 1:\n              unselectedRequest = _a.sent();\n              return [4\n              /*yield*/\n              , this.selectIssuersWaitBlocks()];\n\n            case 2:\n              waitBlocks = _a.sent();\n\n              if (unselectedRequest.blockNumber === 0) {\n                throw new Error('No unselectedRequest to wait for');\n              }\n\n              _a.label = 3;\n\n            case 3:\n              if (!(Date.now() - startTime < timeoutSeconds * 1000)) return [3\n              /*break*/\n              , 6];\n              return [4\n              /*yield*/\n              , this.kit.connection.getBlockNumber()];\n\n            case 4:\n              blockNumber = _a.sent();\n\n              if (blockNumber >= unselectedRequest.blockNumber + waitBlocks) {\n                return [2\n                /*return*/\n                ];\n              }\n\n              return [4\n              /*yield*/\n              , (0, async_1.sleep)(pollDurationSeconds * 1000)];\n\n            case 5:\n              _a.sent();\n\n              return [3\n              /*break*/\n              , 3];\n\n            case 6:\n              throw new Error('Timeout while waiting for selecting issuers');\n          }\n        });\n      });\n    };\n    /**\n     * Returns the issuers of attestations for a phoneNumber/account combo\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n\n    _this.getAttestationIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationIssuers);\n    /**\n     * Returns the attestation state of a phone number/account/issuer tuple\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n    _this.getAttestationState = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationState, undefined, function (state) {\n      return {\n        attestationState: (0, BaseWrapper_1.valueToInt)(state[0])\n      };\n    });\n    /**\n     * Returns the attestation stats of a identifer/account pair\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n\n    _this.getAttestationStat = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationStats, undefined, function (stat) {\n      return {\n        completed: (0, BaseWrapper_1.valueToInt)(stat[0]),\n        total: (0, BaseWrapper_1.valueToInt)(stat[1])\n      };\n    });\n\n    _this.makeIsIssuerRunningAttestationService = function (tries) {\n      if (tries === void 0) {\n        tries = 3;\n      }\n\n      return function (arg) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var metadata, attestationServiceURLClaim, nameClaim, resp, _a, status_1, version, error_1;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 4,, 5]);\n\n                return [4\n                /*yield*/\n                , identity_1.IdentityMetadataWrapper.fetchFromURL(this.kit, arg.metadataURL, tries)];\n\n              case 1:\n                metadata = _b.sent();\n                attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n\n                if (attestationServiceURLClaim === undefined) {\n                  throw new Error(\"No attestation service URL registered for \" + arg.issuer);\n                }\n\n                nameClaim = metadata.findClaim(identity_1.ClaimTypes.NAME);\n                return [4\n                /*yield*/\n                , (0, cross_fetch_1.default)(\"\" + attestationServiceURLClaim.url + (attestationServiceURLClaim.url.substr(-1) === '/' ? '' : '/') + \"status\")];\n\n              case 2:\n                resp = _b.sent();\n\n                if (!resp.ok) {\n                  throw new Error(\"Request failed with status \" + resp.status);\n                }\n\n                return [4\n                /*yield*/\n                , resp.json()];\n\n              case 3:\n                _a = _b.sent(), status_1 = _a.status, version = _a.version;\n\n                if (status_1 !== 'ok') {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    issuer: arg.issuer\n                  }];\n                }\n\n                return [2\n                /*return*/\n                , {\n                  isValid: true,\n                  result: {\n                    blockNumber: arg.blockNumber,\n                    issuer: arg.issuer,\n                    attestationServiceURL: attestationServiceURLClaim.url,\n                    name: nameClaim ? nameClaim.name : undefined,\n                    version: version\n                  }\n                }];\n\n              case 4:\n                error_1 = _b.sent();\n                return [2\n                /*return*/\n                , {\n                  isValid: false,\n                  issuer: arg.issuer\n                }];\n\n              case 5:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      };\n    };\n    /**\n     * Returns the attestation signer for the specified account.\n     * @param account The address of token rewards are accumulated in.\n     * @param account The address of the account.\n     * @return The reward amount.\n     */\n\n\n    _this.getPendingWithdrawals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.pendingWithdrawals, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Allows issuers to withdraw accumulated attestation rewards\n     * @param address The address of the token that will be withdrawn\n     */\n\n    _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.withdraw);\n    /**\n     * Returns the list of accounts associated with an identifier.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     */\n\n    _this.lookupAccountsForIdentifier = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAccountsForIdentifier);\n    /**\n     * Updates sender's approval status on whether to allow an attestation identifier\n     * mapping to be transfered from one address to another.\n     * @param identifier The identifier for this attestation.\n     * @param index The index of the account in the accounts array.\n     * @param from The current attestation address to which the identifier is mapped.\n     * @param to The new address to map to identifier.\n     * @param status The approval status\n     */\n\n    _this.approveTransfer = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.approveTransfer);\n    return _this;\n  }\n  /**\n   * Returns the verified status of an identifier/account pair indicating whether the attestation\n   * stats for a given pair are completed beyond a certain threshold of confidence (aka \"verified\")\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param numAttestationsRequired Optional number of attestations required.  Will default to\n   *  hardcoded value if absent.\n   * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n   *  default to hardcoded value if absent.\n   */\n\n\n  AttestationsWrapper.prototype.getVerifiedStatus = function (identifier, account, numAttestationsRequired, attestationThreshold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var attestationStats;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getAttestationStat(identifier, account)];\n\n          case 1:\n            attestationStats = _a.sent();\n            return [2\n            /*return*/\n            , lib_1.AttestationUtils.isAccountConsideredVerified(attestationStats, numAttestationsRequired, attestationThreshold)];\n        }\n      });\n    });\n  };\n  /**\n   * Calculates the amount of StableToken required to request Attestations\n   * @param attestationsRequested  The number of attestations to request\n   */\n\n\n  AttestationsWrapper.prototype.getAttestationFeeRequired = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenAddress, attestationFee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.registry.addressFor(base_1.CeloContract.StableToken)];\n\n          case 1:\n            tokenAddress = _a.sent();\n            return [4\n            /*yield*/\n            , this.contract.methods.getAttestationRequestFee(tokenAddress).call()];\n\n          case 2:\n            attestationFee = _a.sent();\n            return [2\n            /*return*/\n            , new bignumber_js_1.default(attestationFee).times(attestationsRequested)];\n        }\n      });\n    });\n  };\n  /**\n   * Approves the necessary amount of StableToken to request Attestations\n   * @param attestationsRequested The number of attestations to request\n   */\n\n\n  AttestationsWrapper.prototype.approveAttestationFee = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenContract, fee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getContract(base_1.CeloContract.StableToken)];\n\n          case 1:\n            tokenContract = _a.sent();\n            return [4\n            /*yield*/\n            , this.getAttestationFeeRequired(attestationsRequested)];\n\n          case 2:\n            fee = _a.sent();\n            return [2\n            /*return*/\n            , tokenContract.approve(this.address, fee.toFixed())];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of attestations that can be completed, along with the issuers' attestation\n   * service urls\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n\n\n  AttestationsWrapper.prototype.getActionableAttestations = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getCompletableAttestations(identifier, account).call()];\n\n          case 1:\n            result = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n\n          case 2:\n            results = _a.sent();\n            return [2\n            /*return*/\n            , results.map(function (_) {\n              return _.isValid ? _.result : null;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of issuer addresses that were found to not run the attestation service\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n\n\n  AttestationsWrapper.prototype.getNonCompliantIssuers = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, withAttestationServiceURLs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getCompletableAttestations(identifier, account).call()];\n\n          case 1:\n            result = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n\n          case 2:\n            withAttestationServiceURLs = _a.sent();\n            return [2\n            /*return*/\n            , withAttestationServiceURLs.map(function (_) {\n              return _.isValid ? null : _.issuer;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Completes an attestation with the corresponding code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param issuer The issuer of the attestation\n   * @param code The code received by the validator\n   */\n\n\n  AttestationsWrapper.prototype.complete = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _b.sent();\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(issuer)];\n\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.complete(identifier, v, r, s))];\n        }\n      });\n    });\n  };\n  /**\n   * Given a list of issuers, finds the matching issuer for a given code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param code The code received by the validator\n   * @param issuers The list of potential issuers\n   */\n\n\n  AttestationsWrapper.prototype.findMatchingIssuer = function (identifier, account, code, issuers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, expectedSourceMessage, _i, issuers_1, issuer, attestationSigner;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _i = 0, issuers_1 = issuers;\n            _a.label = 2;\n\n          case 2:\n            if (!(_i < issuers_1.length)) return [3\n            /*break*/\n            , 5];\n            issuer = issuers_1[_i];\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(issuer)];\n\n          case 3:\n            attestationSigner = _a.sent();\n\n            try {\n              lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner);\n              return [2\n              /*return*/\n              , issuer];\n            } catch (error) {\n              return [3\n              /*break*/\n              , 4];\n            }\n\n            _a.label = 4;\n\n          case 4:\n            _i++;\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [2\n            /*return*/\n            , null];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current configuration parameters for the contract.\n   * @param tokens List of tokens used for attestation fees.\n   * @return AttestationsConfig object\n   */\n\n\n  AttestationsWrapper.prototype.getConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var feeTokens, _a, _b, _c, fees;\n\n      var _d;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (!(tokens !== null && tokens !== void 0)) return [3\n            /*break*/\n            , 1];\n            _a = tokens;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            _c = (_b = Object).values;\n            return [4\n            /*yield*/\n            , this.kit.celoTokens.getAddresses()];\n\n          case 2:\n            _a = _c.apply(_b, [_e.sent()]);\n            _e.label = 3;\n\n          case 3:\n            feeTokens = _a;\n            return [4\n            /*yield*/\n            , Promise.all(feeTokens.map(function (token) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var fee;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.attestationRequestFees(token)];\n\n                    case 1:\n                      fee = _a.sent();\n                      return [2\n                      /*return*/\n                      , {\n                        fee: fee,\n                        address: token\n                      }];\n                  }\n                });\n              });\n            }))];\n\n          case 4:\n            fees = _e.sent();\n            _d = {};\n            return [4\n            /*yield*/\n            , this.attestationExpiryBlocks()];\n\n          case 5:\n            return [2\n            /*return*/\n            , (_d.attestationExpiryBlocks = _e.sent(), _d.attestationRequestFees = fees, _d)];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the attestations contract\n   * @return AttestationsConfig object\n   */\n\n\n  AttestationsWrapper.prototype.getHumanReadableConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getConfig(tokens)];\n\n          case 1:\n            config = _a.sent();\n            return [2\n            /*return*/\n            , {\n              attestationRequestFees: config.attestationRequestFees,\n              attestationExpiry: (0, BaseWrapper_1.blocksToDurationString)(config.attestationExpiryBlocks)\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Lookup mapped wallet addresses for a given list of identifiers\n   * @param identifiers Attestation identifiers (e.g. phone hashes)\n   */\n\n\n  AttestationsWrapper.prototype.lookupIdentifiers = function (identifiers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stats, matches, addresses, completed, total, result, rIndex, pIndex, pHash, numberOfMatches, matchingAddresses, mIndex, matchingAddress;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.batchGetAttestationStats(identifiers).call()];\n\n          case 1:\n            stats = _a.sent();\n            matches = stats[0].map(BaseWrapper_1.valueToInt);\n            addresses = stats[1];\n            completed = stats[2].map(BaseWrapper_1.valueToInt);\n            total = stats[3].map(BaseWrapper_1.valueToInt);\n            result = {};\n            rIndex = 0;\n\n            for (pIndex = 0; pIndex < identifiers.length; pIndex++) {\n              pHash = identifiers[pIndex];\n              numberOfMatches = matches[pIndex];\n\n              if (numberOfMatches === 0) {\n                continue;\n              }\n\n              matchingAddresses = {};\n\n              for (mIndex = 0; mIndex < numberOfMatches; mIndex++) {\n                matchingAddress = addresses[rIndex];\n                matchingAddresses[matchingAddress] = {\n                  completed: completed[rIndex],\n                  total: total[rIndex]\n                };\n                rIndex++;\n              }\n\n              result[pHash] = matchingAddresses;\n            }\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * Requests a new attestation\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param attestationsRequested The number of attestations to request\n   */\n\n\n  AttestationsWrapper.prototype.request = function (identifier, attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenAddress;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.registry.addressFor(base_1.CeloContract.StableToken)];\n\n          case 1:\n            tokenAddress = _a.sent();\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.request(identifier, attestationsRequested, tokenAddress))];\n        }\n      });\n    });\n  };\n  /**\n   * Selects the issuers for previously requested attestations for a phone number\n   * @param identifier Attestation identifier (e.g. phone hash)\n   */\n\n\n  AttestationsWrapper.prototype.selectIssuers = function (identifier) {\n    return (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.selectIssuers(identifier));\n  };\n  /**\n   * Waits appropriate number of blocks, then selects issuers for previously requested phone number attestations\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n\n\n  AttestationsWrapper.prototype.selectIssuersAfterWait = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.waitForSelectingIssuers(identifier, account, timeoutSeconds, pollDurationSeconds)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.selectIssuers(identifier)];\n        }\n      });\n    });\n  };\n  /**\n   * Reveal phone number to issuer\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n\n\n  AttestationsWrapper.prototype.revealPhoneNumberToIssuer = function (serviceURL, requestBody) {\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'attestations'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n  };\n  /**\n   * Returns reveal status from validator's attestation service\n   * @param phoneNumber: attestation's phone number\n   * @param account: attestation's account\n   * @param issuer: validator's address\n   * @param serviceURL: validator's attestation service URL\n   * @param pepper: phone number privacy pepper\n   */\n\n\n  AttestationsWrapper.prototype.getRevealStatus = function (phoneNumber, account, issuer, serviceURL, pepper) {\n    var urlParams = new URLSearchParams({\n      phoneNumber: phoneNumber,\n      salt: pepper !== null && pepper !== void 0 ? pepper : '',\n      issuer: issuer,\n      account: account\n    });\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  };\n  /**\n   * Returns attestation code for provided security code from validator's attestation service\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n\n\n  AttestationsWrapper.prototype.getAttestationForSecurityCode = function (serviceURL, requestBody, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var urlParams, additionalHeaders, signature, response, ok, status, body, _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            urlParams = new URLSearchParams({\n              phoneNumber: requestBody.phoneNumber,\n              account: requestBody.account,\n              issuer: requestBody.issuer\n            });\n            additionalHeaders = {};\n\n            if (requestBody.salt) {\n              urlParams.set('salt', requestBody.salt);\n            }\n\n            if (!requestBody.securityCode) return [3\n            /*break*/\n            , 2];\n            urlParams.set('securityCode', requestBody.securityCode);\n            return [4\n            /*yield*/\n            , this.kit.signTypedData(signer, (0, typed_data_constructors_1.attestationSecurityCode)(requestBody.securityCode))];\n\n          case 1:\n            signature = _c.sent();\n            additionalHeaders = {\n              Authentication: lib_1.SignatureUtils.serializeSignature(signature)\n            };\n            _c.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n              method: 'GET',\n              headers: __assign({\n                'Content-Type': 'application/json'\n              }, additionalHeaders)\n            })];\n\n          case 3:\n            response = _c.sent();\n            ok = response.ok, status = response.status;\n            if (!ok) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 4:\n            body = _c.sent();\n\n            if (body.attestationCode) {\n              return [2\n              /*return*/\n              , body.attestationCode];\n            }\n\n            _c.label = 5;\n\n          case 5:\n            _a = Error.bind;\n            _b = \"Error getting security code for \" + requestBody.issuer + \". \" + status + \": \";\n            return [4\n            /*yield*/\n            , response.text()];\n\n          case 6:\n            throw new (_a.apply(Error, [void 0, _b + _c.sent()]))();\n        }\n      });\n    });\n  };\n  /**\n   * Validates a given code by the issuer on-chain\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account The address of the account which requested attestation\n   * @param issuer The address of the issuer of the attestation\n   * @param code The code send by the issuer\n   */\n\n\n  AttestationsWrapper.prototype.validateAttestationCode = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v, result;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _b.sent();\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(issuer)];\n\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [4\n            /*yield*/\n            , this.contract.methods.validateAttestationCode(identifier, account, v, r, s).call()];\n\n          case 3:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , result.toLowerCase() !== address_1.NULL_ADDRESS];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the relevant attestation service status for a validator\n   * @param validator Validator to get the attestation service status for\n   */\n\n\n  AttestationsWrapper.prototype.getAttestationServiceStatus = function (validator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, hasAttestationSigner, attestationSigner, attestationServiceURL, ret, metadataURL, metadata, attestationServiceURLClaim, error_2, statusResponse, statusResponseBody, healthzResponse, healthzResponseBody, error_3, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.hasAuthorizedAttestationSigner(validator.address)];\n\n          case 2:\n            hasAttestationSigner = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getAttestationSigner(validator.address)];\n\n          case 3:\n            attestationSigner = _a.sent();\n            ret = __assign(__assign({}, validator), {\n              hasAttestationSigner: hasAttestationSigner,\n              attestationSigner: attestationSigner,\n              attestationServiceURL: null,\n              okStatus: false,\n              error: null,\n              smsProviders: [],\n              blacklistedRegionCodes: [],\n              rightAccount: false,\n              metadataURL: null,\n              state: AttestationServiceStatusState.NoAttestationSigner,\n              version: null,\n              ageOfLatestBlock: null,\n              smsProvidersRandomized: null,\n              maxDeliveryAttempts: null,\n              maxRerequestMins: null,\n              twilioVerifySidProvided: null\n            });\n\n            if (!hasAttestationSigner) {\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            return [4\n            /*yield*/\n            , accounts.getMetadataURL(validator.address)];\n\n          case 4:\n            metadataURL = _a.sent();\n            ret.metadataURL = metadataURL;\n\n            if (!metadataURL) {\n              ret.state = AttestationServiceStatusState.NoMetadataURL;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            if (metadataURL.startsWith('http://')) {\n              ret.state = AttestationServiceStatusState.InvalidAttestationServiceURL;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , identity_1.IdentityMetadataWrapper.fetchFromURL(this.kit, metadataURL)];\n\n          case 6:\n            metadata = _a.sent();\n            attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n\n            if (!attestationServiceURLClaim) {\n              ret.state = AttestationServiceStatusState.NoAttestationServiceURL;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            attestationServiceURL = attestationServiceURLClaim.url;\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            error_2 = _a.sent();\n            ret.state = error_2.type === 'system' ? AttestationServiceStatusState.MetadataTimeout : AttestationServiceStatusState.InvalidMetadata;\n            ret.error = error_2;\n            return [2\n            /*return*/\n            , ret];\n\n          case 8:\n            ret.attestationServiceURL = attestationServiceURL;\n            _a.label = 9;\n\n          case 9:\n            _a.trys.push([9, 19,, 20]);\n\n            return [4\n            /*yield*/\n            , (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'status'))];\n\n          case 10:\n            statusResponse = _a.sent();\n\n            if (!statusResponse.ok) {\n              ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n              return [2\n              /*return*/\n              , ret];\n            }\n\n            ret.okStatus = true;\n            return [4\n            /*yield*/\n            , statusResponse.json()];\n\n          case 11:\n            statusResponseBody = _a.sent();\n            ret.smsProviders = statusResponseBody.smsProviders;\n            ret.rightAccount = (0, address_1.eqAddress)(validator.address, statusResponseBody.accountAddress);\n            ret.state = ret.rightAccount ? AttestationServiceStatusState.Valid : AttestationServiceStatusState.WrongAccount;\n            ret.ageOfLatestBlock = statusResponseBody.ageOfLatestBlock;\n            ret.smsProvidersRandomized = statusResponseBody.smsProvidersRandomized;\n            ret.maxDeliveryAttempts = statusResponseBody.maxDeliveryAttempts;\n            ret.maxRerequestMins = statusResponseBody.maxRerequestMins;\n            ret.twilioVerifySidProvided = statusResponseBody.twilioVerifySidProvided;\n            if (!statusResponseBody.version) return [3\n            /*break*/\n            , 17];\n            ret.version = statusResponseBody.version;\n            _a.label = 12;\n\n          case 12:\n            _a.trys.push([12, 15,, 16]);\n\n            return [4\n            /*yield*/\n            , (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'healthz'))];\n\n          case 13:\n            healthzResponse = _a.sent();\n            return [4\n            /*yield*/\n            , healthzResponse.json()];\n\n          case 14:\n            healthzResponseBody = _a.sent();\n\n            if (!healthzResponse.ok) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n\n              if (healthzResponseBody.error) {\n                ret.error = healthzResponseBody.error;\n              }\n            }\n\n            return [3\n            /*break*/\n            , 16];\n\n          case 15:\n            error_3 = _a.sent();\n            ret.state = AttestationServiceStatusState.UnreachableHealthz;\n            return [3\n            /*break*/\n            , 16];\n\n          case 16:\n            // Whether or not health check is reachable, also check full node status\n            // (overrides UnreachableHealthz status)\n            if (statusResponseBody.ageOfLatestBlock !== null && statusResponseBody.ageOfLatestBlock > 10 || statusResponseBody.isNodeSyncing === true) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n            }\n\n            return [3\n            /*break*/\n            , 18];\n\n          case 17:\n            // No version implies 1.0.0\n            ret.version = '1.0.0';\n            _a.label = 18;\n\n          case 18:\n            return [3\n            /*break*/\n            , 20];\n\n          case 19:\n            error_4 = _a.sent();\n            ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n            ret.error = error_4;\n            return [3\n            /*break*/\n            , 20];\n\n          case 20:\n            return [2\n            /*return*/\n            , ret];\n        }\n      });\n    });\n  };\n\n  AttestationsWrapper.prototype.revoke = function (identifer, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.lookupAccountsForIdentifier(identifer)];\n\n          case 1:\n            accounts = _a.sent();\n            idx = accounts.findIndex(function (acc) {\n              return (0, address_1.eqAddress)(acc, account);\n            });\n\n            if (idx < 0) {\n              throw new Error(\"Account not found in identifier's accounts\");\n            }\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.revoke(identifer, idx))];\n        }\n      });\n    });\n  };\n\n  return AttestationsWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.AttestationsWrapper = AttestationsWrapper;\nvar AttestationServiceStatusState;\n\n(function (AttestationServiceStatusState) {\n  AttestationServiceStatusState[\"NoAttestationSigner\"] = \"NoAttestationSigner\";\n  AttestationServiceStatusState[\"NoMetadataURL\"] = \"NoMetadataURL\";\n  AttestationServiceStatusState[\"InvalidMetadata\"] = \"InvalidMetadata\";\n  AttestationServiceStatusState[\"NoAttestationServiceURL\"] = \"NoAttestationServiceURL\";\n  AttestationServiceStatusState[\"InvalidAttestationServiceURL\"] = \"InvalidAttestationServiceURL\";\n  AttestationServiceStatusState[\"UnreachableAttestationService\"] = \"UnreachableAttestationService\";\n  AttestationServiceStatusState[\"Valid\"] = \"Valid\";\n  AttestationServiceStatusState[\"UnreachableHealthz\"] = \"UnreachableHealthz\";\n  AttestationServiceStatusState[\"Unhealthy\"] = \"Unhealthy\";\n  AttestationServiceStatusState[\"WrongAccount\"] = \"WrongAccount\";\n  AttestationServiceStatusState[\"MetadataTimeout\"] = \"MetadataTimeout\";\n})(AttestationServiceStatusState = exports.AttestationServiceStatusState || (exports.AttestationServiceStatusState = {}));","map":{"version":3,"sources":["../../src/wrappers/Attestations.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttestationServiceStatusState = exports.AttestationsWrapper = exports.AttestationState = exports.getSecurityCodePrefix = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar parsing_1 = require(\"@celo/base/lib/parsing\");\nvar string_1 = require(\"@celo/base/lib/string\");\nvar connect_1 = require(\"@celo/connect\");\nvar lib_1 = require(\"@celo/utils/lib\");\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nvar base_1 = require(\"../base\");\nvar identity_1 = require(\"../identity\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nfunction hashAddressToSingleDigit(address) {\n    return new bignumber_js_1.default(address.toLowerCase()).modulo(10).toNumber();\n}\nfunction getSecurityCodePrefix(issuerAddress) {\n    return \"\" + hashAddressToSingleDigit(issuerAddress);\n}\nexports.getSecurityCodePrefix = getSecurityCodePrefix;\n/**\n * Contract for managing identities\n */\nvar AttestationState;\n(function (AttestationState) {\n    AttestationState[AttestationState[\"None\"] = 0] = \"None\";\n    AttestationState[AttestationState[\"Incomplete\"] = 1] = \"Incomplete\";\n    AttestationState[AttestationState[\"Complete\"] = 2] = \"Complete\";\n})(AttestationState = exports.AttestationState || (exports.AttestationState = {}));\nfunction parseGetCompletableAttestations(response) {\n    var metadataURLs = (0, parsing_1.parseSolidityStringArray)(response[2].map(BaseWrapper_1.valueToInt), response[3]);\n    return (0, collections_1.zip3)(response[0].map(BaseWrapper_1.valueToInt), response[1], metadataURLs).map(function (_a) {\n        var blockNumber = _a[0], issuer = _a[1], metadataURL = _a[2];\n        return ({ blockNumber: blockNumber, issuer: issuer, metadataURL: metadataURL });\n    });\n}\nvar AttestationsWrapper = /** @class */ (function (_super) {\n    __extends(AttestationsWrapper, _super);\n    function AttestationsWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         *  Returns the time an attestation can be completable before it is considered expired\n         */\n        _this.attestationExpiryBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationExpiryBlocks, undefined, BaseWrapper_1.valueToInt);\n        /**\n         * Returns the attestation request fee in a given currency.\n         * @param address Token address.\n         * @returns The fee as big number.\n         */\n        _this.attestationRequestFees = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationRequestFees, undefined, BaseWrapper_1.valueToBigNumber);\n        _this.selectIssuersWaitBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.selectIssuersWaitBlocks, undefined, BaseWrapper_1.valueToInt);\n        /**\n         * @notice Returns the unselected attestation request for an identifier/account pair, if any.\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getUnselectedRequest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUnselectedRequest, undefined, function (res) { return ({\n            blockNumber: (0, BaseWrapper_1.valueToInt)(res[0]),\n            attestationsRequested: (0, BaseWrapper_1.valueToInt)(res[1]),\n            attestationRequestFeeToken: res[2],\n        }); });\n        /**\n         * @notice Checks if attestation request is expired.\n         * @param attestationRequestBlockNumber Attestation Request Block Number to be checked\n         */\n        _this.isAttestationExpired = function (attestationRequestBlockNumber) { return __awaiter(_this, void 0, void 0, function () {\n            var attestationExpiryBlocks, blockNumber;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.attestationExpiryBlocks()];\n                    case 1:\n                        attestationExpiryBlocks = _a.sent();\n                        return [4 /*yield*/, this.kit.connection.getBlockNumber()];\n                    case 2:\n                        blockNumber = _a.sent();\n                        return [2 /*return*/, blockNumber >= attestationRequestBlockNumber + attestationExpiryBlocks];\n                }\n            });\n        }); };\n        /**\n         * @notice Waits for appropriate block numbers for before issuer can be selected\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.waitForSelectingIssuers = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n            if (timeoutSeconds === void 0) { timeoutSeconds = 120; }\n            if (pollDurationSeconds === void 0) { pollDurationSeconds = 1; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var startTime, unselectedRequest, waitBlocks, blockNumber;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            startTime = Date.now();\n                            return [4 /*yield*/, this.getUnselectedRequest(identifier, account)];\n                        case 1:\n                            unselectedRequest = _a.sent();\n                            return [4 /*yield*/, this.selectIssuersWaitBlocks()];\n                        case 2:\n                            waitBlocks = _a.sent();\n                            if (unselectedRequest.blockNumber === 0) {\n                                throw new Error('No unselectedRequest to wait for');\n                            }\n                            _a.label = 3;\n                        case 3:\n                            if (!(Date.now() - startTime < timeoutSeconds * 1000)) return [3 /*break*/, 6];\n                            return [4 /*yield*/, this.kit.connection.getBlockNumber()];\n                        case 4:\n                            blockNumber = _a.sent();\n                            if (blockNumber >= unselectedRequest.blockNumber + waitBlocks) {\n                                return [2 /*return*/];\n                            }\n                            return [4 /*yield*/, (0, async_1.sleep)(pollDurationSeconds * 1000)];\n                        case 5:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 6: throw new Error('Timeout while waiting for selecting issuers');\n                    }\n                });\n            });\n        };\n        /**\n         * Returns the issuers of attestations for a phoneNumber/account combo\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getAttestationIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationIssuers);\n        /**\n         * Returns the attestation state of a phone number/account/issuer tuple\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getAttestationState = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationState, undefined, function (state) { return ({ attestationState: (0, BaseWrapper_1.valueToInt)(state[0]) }); });\n        /**\n         * Returns the attestation stats of a identifer/account pair\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getAttestationStat = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationStats, undefined, function (stat) { return ({ completed: (0, BaseWrapper_1.valueToInt)(stat[0]), total: (0, BaseWrapper_1.valueToInt)(stat[1]) }); });\n        _this.makeIsIssuerRunningAttestationService = function (tries) {\n            if (tries === void 0) { tries = 3; }\n            return function (arg) { return __awaiter(_this, void 0, void 0, function () {\n                var metadata, attestationServiceURLClaim, nameClaim, resp, _a, status_1, version, error_1;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 4, , 5]);\n                            return [4 /*yield*/, identity_1.IdentityMetadataWrapper.fetchFromURL(this.kit, arg.metadataURL, tries)];\n                        case 1:\n                            metadata = _b.sent();\n                            attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n                            if (attestationServiceURLClaim === undefined) {\n                                throw new Error(\"No attestation service URL registered for \" + arg.issuer);\n                            }\n                            nameClaim = metadata.findClaim(identity_1.ClaimTypes.NAME);\n                            return [4 /*yield*/, (0, cross_fetch_1.default)(\"\" + attestationServiceURLClaim.url + (attestationServiceURLClaim.url.substr(-1) === '/' ? '' : '/') + \"status\")];\n                        case 2:\n                            resp = _b.sent();\n                            if (!resp.ok) {\n                                throw new Error(\"Request failed with status \" + resp.status);\n                            }\n                            return [4 /*yield*/, resp.json()];\n                        case 3:\n                            _a = _b.sent(), status_1 = _a.status, version = _a.version;\n                            if (status_1 !== 'ok') {\n                                return [2 /*return*/, { isValid: false, issuer: arg.issuer }];\n                            }\n                            return [2 /*return*/, {\n                                    isValid: true,\n                                    result: {\n                                        blockNumber: arg.blockNumber,\n                                        issuer: arg.issuer,\n                                        attestationServiceURL: attestationServiceURLClaim.url,\n                                        name: nameClaim ? nameClaim.name : undefined,\n                                        version: version,\n                                    },\n                                }];\n                        case 4:\n                            error_1 = _b.sent();\n                            return [2 /*return*/, { isValid: false, issuer: arg.issuer }];\n                        case 5: return [2 /*return*/];\n                    }\n                });\n            }); };\n        };\n        /**\n         * Returns the attestation signer for the specified account.\n         * @param account The address of token rewards are accumulated in.\n         * @param account The address of the account.\n         * @return The reward amount.\n         */\n        _this.getPendingWithdrawals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.pendingWithdrawals, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Allows issuers to withdraw accumulated attestation rewards\n         * @param address The address of the token that will be withdrawn\n         */\n        _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.withdraw);\n        /**\n         * Returns the list of accounts associated with an identifier.\n         * @param identifier Attestation identifier (e.g. phone hash)\n         */\n        _this.lookupAccountsForIdentifier = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAccountsForIdentifier);\n        /**\n         * Updates sender's approval status on whether to allow an attestation identifier\n         * mapping to be transfered from one address to another.\n         * @param identifier The identifier for this attestation.\n         * @param index The index of the account in the accounts array.\n         * @param from The current attestation address to which the identifier is mapped.\n         * @param to The new address to map to identifier.\n         * @param status The approval status\n         */\n        _this.approveTransfer = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.approveTransfer);\n        return _this;\n    }\n    /**\n     * Returns the verified status of an identifier/account pair indicating whether the attestation\n     * stats for a given pair are completed beyond a certain threshold of confidence (aka \"verified\")\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     * @param numAttestationsRequired Optional number of attestations required.  Will default to\n     *  hardcoded value if absent.\n     * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n     *  default to hardcoded value if absent.\n     */\n    AttestationsWrapper.prototype.getVerifiedStatus = function (identifier, account, numAttestationsRequired, attestationThreshold) {\n        return __awaiter(this, void 0, void 0, function () {\n            var attestationStats;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getAttestationStat(identifier, account)];\n                    case 1:\n                        attestationStats = _a.sent();\n                        return [2 /*return*/, lib_1.AttestationUtils.isAccountConsideredVerified(attestationStats, numAttestationsRequired, attestationThreshold)];\n                }\n            });\n        });\n    };\n    /**\n     * Calculates the amount of StableToken required to request Attestations\n     * @param attestationsRequested  The number of attestations to request\n     */\n    AttestationsWrapper.prototype.getAttestationFeeRequired = function (attestationsRequested) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tokenAddress, attestationFee;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.registry.addressFor(base_1.CeloContract.StableToken)];\n                    case 1:\n                        tokenAddress = _a.sent();\n                        return [4 /*yield*/, this.contract.methods.getAttestationRequestFee(tokenAddress).call()];\n                    case 2:\n                        attestationFee = _a.sent();\n                        return [2 /*return*/, new bignumber_js_1.default(attestationFee).times(attestationsRequested)];\n                }\n            });\n        });\n    };\n    /**\n     * Approves the necessary amount of StableToken to request Attestations\n     * @param attestationsRequested The number of attestations to request\n     */\n    AttestationsWrapper.prototype.approveAttestationFee = function (attestationsRequested) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tokenContract, fee;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getContract(base_1.CeloContract.StableToken)];\n                    case 1:\n                        tokenContract = _a.sent();\n                        return [4 /*yield*/, this.getAttestationFeeRequired(attestationsRequested)];\n                    case 2:\n                        fee = _a.sent();\n                        return [2 /*return*/, tokenContract.approve(this.address, fee.toFixed())];\n                }\n            });\n        });\n    };\n    /**\n     * Returns an array of attestations that can be completed, along with the issuers' attestation\n     * service urls\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    AttestationsWrapper.prototype.getActionableAttestations = function (identifier, account, tries) {\n        if (tries === void 0) { tries = 3; }\n        return __awaiter(this, void 0, void 0, function () {\n            var result, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods\n                            .getCompletableAttestations(identifier, account)\n                            .call()];\n                    case 1:\n                        result = _a.sent();\n                        return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n                    case 2:\n                        results = _a.sent();\n                        return [2 /*return*/, results.map(function (_) { return (_.isValid ? _.result : null); }).filter(collections_1.notEmpty)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns an array of issuer addresses that were found to not run the attestation service\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    AttestationsWrapper.prototype.getNonCompliantIssuers = function (identifier, account, tries) {\n        if (tries === void 0) { tries = 3; }\n        return __awaiter(this, void 0, void 0, function () {\n            var result, withAttestationServiceURLs;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods\n                            .getCompletableAttestations(identifier, account)\n                            .call()];\n                    case 1:\n                        result = _a.sent();\n                        return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n                    case 2:\n                        withAttestationServiceURLs = _a.sent();\n                        return [2 /*return*/, withAttestationServiceURLs.map(function (_) { return (_.isValid ? null : _.issuer); }).filter(collections_1.notEmpty)];\n                }\n            });\n        });\n    };\n    /**\n     * Completes an attestation with the corresponding code\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     * @param issuer The issuer of the attestation\n     * @param code The code received by the validator\n     */\n    AttestationsWrapper.prototype.complete = function (identifier, account, issuer, code) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 1:\n                        accounts = _b.sent();\n                        return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n                    case 2:\n                        attestationSigner = _b.sent();\n                        expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n                        _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.complete(identifier, v, r, s))];\n                }\n            });\n        });\n    };\n    /**\n     * Given a list of issuers, finds the matching issuer for a given code\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     * @param code The code received by the validator\n     * @param issuers The list of potential issuers\n     */\n    AttestationsWrapper.prototype.findMatchingIssuer = function (identifier, account, code, issuers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, expectedSourceMessage, _i, issuers_1, issuer, attestationSigner;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 1:\n                        accounts = _a.sent();\n                        expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n                        _i = 0, issuers_1 = issuers;\n                        _a.label = 2;\n                    case 2:\n                        if (!(_i < issuers_1.length)) return [3 /*break*/, 5];\n                        issuer = issuers_1[_i];\n                        return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n                    case 3:\n                        attestationSigner = _a.sent();\n                        try {\n                            lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner);\n                            return [2 /*return*/, issuer];\n                        }\n                        catch (error) {\n                            return [3 /*break*/, 4];\n                        }\n                        _a.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 2];\n                    case 5: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current configuration parameters for the contract.\n     * @param tokens List of tokens used for attestation fees.\n     * @return AttestationsConfig object\n     */\n    AttestationsWrapper.prototype.getConfig = function (tokens) {\n        return __awaiter(this, void 0, void 0, function () {\n            var feeTokens, _a, _b, _c, fees;\n            var _d;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!(tokens !== null && tokens !== void 0)) return [3 /*break*/, 1];\n                        _a = tokens;\n                        return [3 /*break*/, 3];\n                    case 1:\n                        _c = (_b = Object).values;\n                        return [4 /*yield*/, this.kit.celoTokens.getAddresses()];\n                    case 2:\n                        _a = _c.apply(_b, [_e.sent()]);\n                        _e.label = 3;\n                    case 3:\n                        feeTokens = _a;\n                        return [4 /*yield*/, Promise.all(feeTokens.map(function (token) { return __awaiter(_this, void 0, void 0, function () {\n                                var fee;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.attestationRequestFees(token)];\n                                        case 1:\n                                            fee = _a.sent();\n                                            return [2 /*return*/, { fee: fee, address: token }];\n                                    }\n                                });\n                            }); }))];\n                    case 4:\n                        fees = _e.sent();\n                        _d = {};\n                        return [4 /*yield*/, this.attestationExpiryBlocks()];\n                    case 5: return [2 /*return*/, (_d.attestationExpiryBlocks = _e.sent(),\n                            _d.attestationRequestFees = fees,\n                            _d)];\n                }\n            });\n        });\n    };\n    /**\n     * @dev Returns human readable configuration of the attestations contract\n     * @return AttestationsConfig object\n     */\n    AttestationsWrapper.prototype.getHumanReadableConfig = function (tokens) {\n        return __awaiter(this, void 0, void 0, function () {\n            var config;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getConfig(tokens)];\n                    case 1:\n                        config = _a.sent();\n                        return [2 /*return*/, {\n                                attestationRequestFees: config.attestationRequestFees,\n                                attestationExpiry: (0, BaseWrapper_1.blocksToDurationString)(config.attestationExpiryBlocks),\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Lookup mapped wallet addresses for a given list of identifiers\n     * @param identifiers Attestation identifiers (e.g. phone hashes)\n     */\n    AttestationsWrapper.prototype.lookupIdentifiers = function (identifiers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var stats, matches, addresses, completed, total, result, rIndex, pIndex, pHash, numberOfMatches, matchingAddresses, mIndex, matchingAddress;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.batchGetAttestationStats(identifiers).call()];\n                    case 1:\n                        stats = _a.sent();\n                        matches = stats[0].map(BaseWrapper_1.valueToInt);\n                        addresses = stats[1];\n                        completed = stats[2].map(BaseWrapper_1.valueToInt);\n                        total = stats[3].map(BaseWrapper_1.valueToInt);\n                        result = {};\n                        rIndex = 0;\n                        for (pIndex = 0; pIndex < identifiers.length; pIndex++) {\n                            pHash = identifiers[pIndex];\n                            numberOfMatches = matches[pIndex];\n                            if (numberOfMatches === 0) {\n                                continue;\n                            }\n                            matchingAddresses = {};\n                            for (mIndex = 0; mIndex < numberOfMatches; mIndex++) {\n                                matchingAddress = addresses[rIndex];\n                                matchingAddresses[matchingAddress] = {\n                                    completed: completed[rIndex],\n                                    total: total[rIndex],\n                                };\n                                rIndex++;\n                            }\n                            result[pHash] = matchingAddresses;\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * Requests a new attestation\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param attestationsRequested The number of attestations to request\n     */\n    AttestationsWrapper.prototype.request = function (identifier, attestationsRequested) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tokenAddress;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.registry.addressFor(base_1.CeloContract.StableToken)];\n                    case 1:\n                        tokenAddress = _a.sent();\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.request(identifier, attestationsRequested, tokenAddress))];\n                }\n            });\n        });\n    };\n    /**\n     * Selects the issuers for previously requested attestations for a phone number\n     * @param identifier Attestation identifier (e.g. phone hash)\n     */\n    AttestationsWrapper.prototype.selectIssuers = function (identifier) {\n        return (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.selectIssuers(identifier));\n    };\n    /**\n     * Waits appropriate number of blocks, then selects issuers for previously requested phone number attestations\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    AttestationsWrapper.prototype.selectIssuersAfterWait = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.waitForSelectingIssuers(identifier, account, timeoutSeconds, pollDurationSeconds)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, this.selectIssuers(identifier)];\n                }\n            });\n        });\n    };\n    /**\n     * Reveal phone number to issuer\n     * @param serviceURL: validator's attestation service URL\n     * @param body\n     */\n    AttestationsWrapper.prototype.revealPhoneNumberToIssuer = function (serviceURL, requestBody) {\n        return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'attestations'), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n    };\n    /**\n     * Returns reveal status from validator's attestation service\n     * @param phoneNumber: attestation's phone number\n     * @param account: attestation's account\n     * @param issuer: validator's address\n     * @param serviceURL: validator's attestation service URL\n     * @param pepper: phone number privacy pepper\n     */\n    AttestationsWrapper.prototype.getRevealStatus = function (phoneNumber, account, issuer, serviceURL, pepper) {\n        var urlParams = new URLSearchParams({\n            phoneNumber: phoneNumber,\n            salt: pepper !== null && pepper !== void 0 ? pepper : '',\n            issuer: issuer,\n            account: account,\n        });\n        return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        });\n    };\n    /**\n     * Returns attestation code for provided security code from validator's attestation service\n     * @param serviceURL: validator's attestation service URL\n     * @param body\n     */\n    AttestationsWrapper.prototype.getAttestationForSecurityCode = function (serviceURL, requestBody, signer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var urlParams, additionalHeaders, signature, response, ok, status, body, _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        urlParams = new URLSearchParams({\n                            phoneNumber: requestBody.phoneNumber,\n                            account: requestBody.account,\n                            issuer: requestBody.issuer,\n                        });\n                        additionalHeaders = {};\n                        if (requestBody.salt) {\n                            urlParams.set('salt', requestBody.salt);\n                        }\n                        if (!requestBody.securityCode) return [3 /*break*/, 2];\n                        urlParams.set('securityCode', requestBody.securityCode);\n                        return [4 /*yield*/, this.kit.signTypedData(signer, (0, typed_data_constructors_1.attestationSecurityCode)(requestBody.securityCode))];\n                    case 1:\n                        signature = _c.sent();\n                        additionalHeaders = {\n                            Authentication: lib_1.SignatureUtils.serializeSignature(signature),\n                        };\n                        _c.label = 2;\n                    case 2: return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n                            method: 'GET',\n                            headers: __assign({ 'Content-Type': 'application/json' }, additionalHeaders),\n                        })];\n                    case 3:\n                        response = _c.sent();\n                        ok = response.ok, status = response.status;\n                        if (!ok) return [3 /*break*/, 5];\n                        return [4 /*yield*/, response.json()];\n                    case 4:\n                        body = _c.sent();\n                        if (body.attestationCode) {\n                            return [2 /*return*/, body.attestationCode];\n                        }\n                        _c.label = 5;\n                    case 5:\n                        _a = Error.bind;\n                        _b = \"Error getting security code for \" + requestBody.issuer + \". \" + status + \": \";\n                        return [4 /*yield*/, response.text()];\n                    case 6: throw new (_a.apply(Error, [void 0, _b + (_c.sent())]))();\n                }\n            });\n        });\n    };\n    /**\n     * Validates a given code by the issuer on-chain\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account The address of the account which requested attestation\n     * @param issuer The address of the issuer of the attestation\n     * @param code The code send by the issuer\n     */\n    AttestationsWrapper.prototype.validateAttestationCode = function (identifier, account, issuer, code) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v, result;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 1:\n                        accounts = _b.sent();\n                        return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n                    case 2:\n                        attestationSigner = _b.sent();\n                        expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n                        _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n                        return [4 /*yield*/, this.contract.methods\n                                .validateAttestationCode(identifier, account, v, r, s)\n                                .call()];\n                    case 3:\n                        result = _b.sent();\n                        return [2 /*return*/, result.toLowerCase() !== address_1.NULL_ADDRESS];\n                }\n            });\n        });\n    };\n    /**\n     * Gets the relevant attestation service status for a validator\n     * @param validator Validator to get the attestation service status for\n     */\n    AttestationsWrapper.prototype.getAttestationServiceStatus = function (validator) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, hasAttestationSigner, attestationSigner, attestationServiceURL, ret, metadataURL, metadata, attestationServiceURLClaim, error_2, statusResponse, statusResponseBody, healthzResponse, healthzResponseBody, error_3, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 1:\n                        accounts = _a.sent();\n                        return [4 /*yield*/, accounts.hasAuthorizedAttestationSigner(validator.address)];\n                    case 2:\n                        hasAttestationSigner = _a.sent();\n                        return [4 /*yield*/, accounts.getAttestationSigner(validator.address)];\n                    case 3:\n                        attestationSigner = _a.sent();\n                        ret = __assign(__assign({}, validator), { hasAttestationSigner: hasAttestationSigner, attestationSigner: attestationSigner, attestationServiceURL: null, okStatus: false, error: null, smsProviders: [], blacklistedRegionCodes: [], rightAccount: false, metadataURL: null, state: AttestationServiceStatusState.NoAttestationSigner, version: null, ageOfLatestBlock: null, smsProvidersRandomized: null, maxDeliveryAttempts: null, maxRerequestMins: null, twilioVerifySidProvided: null });\n                        if (!hasAttestationSigner) {\n                            return [2 /*return*/, ret];\n                        }\n                        return [4 /*yield*/, accounts.getMetadataURL(validator.address)];\n                    case 4:\n                        metadataURL = _a.sent();\n                        ret.metadataURL = metadataURL;\n                        if (!metadataURL) {\n                            ret.state = AttestationServiceStatusState.NoMetadataURL;\n                            return [2 /*return*/, ret];\n                        }\n                        if (metadataURL.startsWith('http://')) {\n                            ret.state = AttestationServiceStatusState.InvalidAttestationServiceURL;\n                            return [2 /*return*/, ret];\n                        }\n                        _a.label = 5;\n                    case 5:\n                        _a.trys.push([5, 7, , 8]);\n                        return [4 /*yield*/, identity_1.IdentityMetadataWrapper.fetchFromURL(this.kit, metadataURL)];\n                    case 6:\n                        metadata = _a.sent();\n                        attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n                        if (!attestationServiceURLClaim) {\n                            ret.state = AttestationServiceStatusState.NoAttestationServiceURL;\n                            return [2 /*return*/, ret];\n                        }\n                        attestationServiceURL = attestationServiceURLClaim.url;\n                        return [3 /*break*/, 8];\n                    case 7:\n                        error_2 = _a.sent();\n                        ret.state =\n                            error_2.type === 'system'\n                                ? AttestationServiceStatusState.MetadataTimeout\n                                : AttestationServiceStatusState.InvalidMetadata;\n                        ret.error = error_2;\n                        return [2 /*return*/, ret];\n                    case 8:\n                        ret.attestationServiceURL = attestationServiceURL;\n                        _a.label = 9;\n                    case 9:\n                        _a.trys.push([9, 19, , 20]);\n                        return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'status'))];\n                    case 10:\n                        statusResponse = _a.sent();\n                        if (!statusResponse.ok) {\n                            ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n                            return [2 /*return*/, ret];\n                        }\n                        ret.okStatus = true;\n                        return [4 /*yield*/, statusResponse.json()];\n                    case 11:\n                        statusResponseBody = _a.sent();\n                        ret.smsProviders = statusResponseBody.smsProviders;\n                        ret.rightAccount = (0, address_1.eqAddress)(validator.address, statusResponseBody.accountAddress);\n                        ret.state = ret.rightAccount\n                            ? AttestationServiceStatusState.Valid\n                            : AttestationServiceStatusState.WrongAccount;\n                        ret.ageOfLatestBlock = statusResponseBody.ageOfLatestBlock;\n                        ret.smsProvidersRandomized = statusResponseBody.smsProvidersRandomized;\n                        ret.maxDeliveryAttempts = statusResponseBody.maxDeliveryAttempts;\n                        ret.maxRerequestMins = statusResponseBody.maxRerequestMins;\n                        ret.twilioVerifySidProvided = statusResponseBody.twilioVerifySidProvided;\n                        if (!statusResponseBody.version) return [3 /*break*/, 17];\n                        ret.version = statusResponseBody.version;\n                        _a.label = 12;\n                    case 12:\n                        _a.trys.push([12, 15, , 16]);\n                        return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'healthz'))];\n                    case 13:\n                        healthzResponse = _a.sent();\n                        return [4 /*yield*/, healthzResponse.json()];\n                    case 14:\n                        healthzResponseBody = _a.sent();\n                        if (!healthzResponse.ok) {\n                            ret.state = AttestationServiceStatusState.Unhealthy;\n                            if (healthzResponseBody.error) {\n                                ret.error = healthzResponseBody.error;\n                            }\n                        }\n                        return [3 /*break*/, 16];\n                    case 15:\n                        error_3 = _a.sent();\n                        ret.state = AttestationServiceStatusState.UnreachableHealthz;\n                        return [3 /*break*/, 16];\n                    case 16:\n                        // Whether or not health check is reachable, also check full node status\n                        // (overrides UnreachableHealthz status)\n                        if ((statusResponseBody.ageOfLatestBlock !== null &&\n                            statusResponseBody.ageOfLatestBlock > 10) ||\n                            statusResponseBody.isNodeSyncing === true) {\n                            ret.state = AttestationServiceStatusState.Unhealthy;\n                        }\n                        return [3 /*break*/, 18];\n                    case 17:\n                        // No version implies 1.0.0\n                        ret.version = '1.0.0';\n                        _a.label = 18;\n                    case 18: return [3 /*break*/, 20];\n                    case 19:\n                        error_4 = _a.sent();\n                        ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n                        ret.error = error_4;\n                        return [3 /*break*/, 20];\n                    case 20: return [2 /*return*/, ret];\n                }\n            });\n        });\n    };\n    AttestationsWrapper.prototype.revoke = function (identifer, account) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, idx;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.lookupAccountsForIdentifier(identifer)];\n                    case 1:\n                        accounts = _a.sent();\n                        idx = accounts.findIndex(function (acc) { return (0, address_1.eqAddress)(acc, account); });\n                        if (idx < 0) {\n                            throw new Error(\"Account not found in identifier's accounts\");\n                        }\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.revoke(identifer, idx))];\n                }\n            });\n        });\n    };\n    return AttestationsWrapper;\n}(BaseWrapper_1.BaseWrapper));\nexports.AttestationsWrapper = AttestationsWrapper;\nvar AttestationServiceStatusState;\n(function (AttestationServiceStatusState) {\n    AttestationServiceStatusState[\"NoAttestationSigner\"] = \"NoAttestationSigner\";\n    AttestationServiceStatusState[\"NoMetadataURL\"] = \"NoMetadataURL\";\n    AttestationServiceStatusState[\"InvalidMetadata\"] = \"InvalidMetadata\";\n    AttestationServiceStatusState[\"NoAttestationServiceURL\"] = \"NoAttestationServiceURL\";\n    AttestationServiceStatusState[\"InvalidAttestationServiceURL\"] = \"InvalidAttestationServiceURL\";\n    AttestationServiceStatusState[\"UnreachableAttestationService\"] = \"UnreachableAttestationService\";\n    AttestationServiceStatusState[\"Valid\"] = \"Valid\";\n    AttestationServiceStatusState[\"UnreachableHealthz\"] = \"UnreachableHealthz\";\n    AttestationServiceStatusState[\"Unhealthy\"] = \"Unhealthy\";\n    AttestationServiceStatusState[\"WrongAccount\"] = \"WrongAccount\";\n    AttestationServiceStatusState[\"MetadataTimeout\"] = \"MetadataTimeout\";\n})(AttestationServiceStatusState = exports.AttestationServiceStatusState || (exports.AttestationServiceStatusState = {}));\n//# sourceMappingURL=Attestations.js.map"]},"metadata":{},"sourceType":"script"}