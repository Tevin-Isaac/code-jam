{"ast":null,"code":"/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\nexport function defer() {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise,\n    resolve,\n    reject\n  };\n} // TODO use bip32-path library\n\nexport function splitPath(path) {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\nexport function eachSeries(arr, fun) {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\nexport function foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\nexport function doIf(condition, callback) {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\nexport function asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}","map":{"version":3,"sources":["../src/utils.js"],"names":["promise","resolve","reject","result","components","path","element","number","parseInt","isNaN","arr","p","fun","Promise","index","array","iterate","callback","predicate","res"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAwBA,OAAO,SAAA,KAAA,GAA8B;EACnC,IAAA,OAAA,EAAA,MAAA;EACA,IAAIA,OAAO,GAAG,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,OAAA,EAA2B;IACnDC,OAAO,GAAPA,OAAAA;IACAC,MAAM,GAANA,OAAAA;EAFF,CAAc,CAAd;EAIA,IAAI,CAAA,OAAA,IAAY,CAAhB,MAAA,EAAyB,MANU,eAMV,CANU,CAMa;;EAChD,OAAO;IAAA,OAAA;IAAA,OAAA;IAAoBA;EAApB,CAAP;EAGF;;AACA,OAAO,SAAA,SAAA,CAAA,IAAA,EAA2C;EAChD,IAAIC,MAAM,GAAV,EAAA;EACA,IAAIC,UAAU,GAAGC,IAAI,CAAJA,KAAAA,CAAjB,GAAiBA,CAAjB;EACAD,UAAU,CAAVA,OAAAA,CAAmBE,OAAO,IAAI;IAC5B,IAAIC,MAAM,GAAGC,QAAQ,CAAA,OAAA,EAArB,EAAqB,CAArB;;IACA,IAAIC,KAAK,CAAT,MAAS,CAAT,EAAmB;MAAA,OAAA,CACT;IACT;;IACD,IAAIH,OAAO,CAAPA,MAAAA,GAAAA,CAAAA,IAAsBA,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAARA,CAAO,CAAPA,KAA1B,GAAA,EAA+D;MAC7DC,MAAM,IAANA,UAAAA;IACD;;IACDJ,MAAM,CAANA,IAAAA,CAAAA,MAAAA;EARFC,CAAAA;EAUA,OAAA,MAAA;EAGF;;AAEA,OAAO,SAAA,UAAA,CAAA,GAAA,EAAA,GAAA,EAAmE;EACxE,OAAOM,GAAG,CAAHA,MAAAA,CAAW,CAAA,CAAA,EAAA,CAAA,KAAUC,CAAC,CAADA,IAAAA,CAAO,MAAMC,GAAG,CAArCF,CAAqC,CAAhBC,CAArBD,EAA2CG,OAAO,CAAzD,OAAkDA,EAA3CH,CAAP;AACD;AAED,OAAO,SAAA,OAAA,CAAA,GAAA,EAAA,QAAA,EAGS;EACd,SAAA,OAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAuC;IACrC,IAAII,KAAK,IAAIC,KAAK,CAAlB,MAAA,EAA2B;MACzB,OAAA,MAAA;IADF,CAAA,MAGE,OAAO,QAAQ,CAACA,KAAK,CAAN,KAAM,CAAN,EAAR,KAAQ,CAAR,CAAA,IAAA,CAAmC,UAAA,GAAA,EAAc;MACtDZ,MAAM,CAANA,IAAAA,CAAAA,GAAAA;MACA,OAAOa,OAAO,CAACF,KAAK,GAAN,CAAA,EAAA,KAAA,EAAd,MAAc,CAAd;IAFF,CAAO,CAAP;EAIH;;EACD,OAAOD,OAAO,CAAPA,OAAAA,GAAAA,IAAAA,CAAuB,MAAMG,OAAO,CAAA,CAAA,EAAA,GAAA,EAA3C,EAA2C,CAApCH,CAAP;AACD;AAED,OAAO,SAAA,IAAA,CAAA,SAAA,EAAA,QAAA,EAGU;EACf,OAAO,OAAO,CAAP,OAAA,GAAA,IAAA,CAAuB,MAAM;IAClC,IAAA,SAAA,EAAe;MACb,OAAOI,QAAP,EAAA;IACD;EAHH,CAAO,CAAP;AAKD;AAED,OAAO,SAAA,UAAA,CAAA,SAAA,EAAA,QAAA,EAGc;EACnB,SAAA,OAAA,CAAA,MAAA,EAAyB;IACvB,IAAI,CAACC,SAAL,EAAA,EAAkB;MAChB,OAAA,MAAA;IADF,CAAA,MAEO;MACL,OAAO,QAAQ,GAAR,IAAA,CAAgBC,GAAG,IAAI;QAC5BhB,MAAM,CAANA,IAAAA,CAAAA,GAAAA;QACA,OAAOa,OAAO,CAAd,MAAc,CAAd;MAFF,CAAO,CAAP;IAID;EACF;;EACD,OAAOH,OAAO,CAAPA,OAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAAP,OAAOA,CAAP;AACD","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\ntype Defer<T> = {\n  promise: Promise<T>,\n  resolve: T => void,\n  reject: any => void\n};\n\nexport function defer<T>(): Defer<T> {\n  let resolve, reject;\n  let promise = new Promise(function(success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n  return { promise, resolve, reject };\n}\n\n// TODO use bip32-path library\nexport function splitPath(path: string): number[] {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\n// TODO use async await\n\nexport function eachSeries<A>(arr: A[], fun: A => Promise<*>): Promise<*> {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\n\nexport function foreach<T, A>(\n  arr: T[],\n  callback: (T, number) => Promise<A>\n): Promise<A[]> {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else\n      return callback(array[index], index).then(function(res) {\n        result.push(res);\n        return iterate(index + 1, array, result);\n      });\n  }\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nexport function doIf(\n  condition: boolean,\n  callback: () => any | Promise<any>\n): Promise<void> {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\n\nexport function asyncWhile<T>(\n  predicate: () => boolean,\n  callback: () => Promise<T>\n): Promise<Array<T>> {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n  return Promise.resolve([]).then(iterate);\n}\n"]},"metadata":{},"sourceType":"module"}