{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDappKitRequestDeeplink = exports.parseDappkitResponseDeeplink = exports.serializeDappKitRequestDeeplink = exports.SignTxRequest = exports.produceResponseDeeplink = exports.SignTxResponseSuccess = exports.AccountAuthResponseSuccess = exports.AccountAuthRequest = exports.DappKitResponseStatus = exports.DappKitRequestTypes = exports.DAPPKIT_BASE_HOST = void 0;\n\nvar querystring_1 = require(\"querystring\");\n\nvar url_1 = require(\"url\");\n\nexports.DAPPKIT_BASE_HOST = 'celo://wallet/dappkit';\nvar DappKitRequestTypes;\n\n(function (DappKitRequestTypes) {\n  DappKitRequestTypes[\"ACCOUNT_ADDRESS\"] = \"account_address\";\n  DappKitRequestTypes[\"SIGN_TX\"] = \"sign_tx\";\n})(DappKitRequestTypes = exports.DappKitRequestTypes || (exports.DappKitRequestTypes = {}));\n\nvar DappKitResponseStatus;\n\n(function (DappKitResponseStatus) {\n  DappKitResponseStatus[\"SUCCESS\"] = \"200\";\n  DappKitResponseStatus[\"UNAUTHORIZED\"] = \"401\";\n})(DappKitResponseStatus = exports.DappKitResponseStatus || (exports.DappKitResponseStatus = {}));\n\nvar AccountAuthRequest = function (meta) {\n  return __assign({\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS\n  }, meta);\n};\n\nexports.AccountAuthRequest = AccountAuthRequest;\n\nvar AccountAuthResponseSuccess = function (address, phoneNumber, pepper) {\n  return {\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n    status: DappKitResponseStatus.SUCCESS,\n    address: address,\n    phoneNumber: phoneNumber,\n    pepper: pepper\n  };\n};\n\nexports.AccountAuthResponseSuccess = AccountAuthResponseSuccess;\n\nvar SignTxResponseSuccess = function (rawTxs) {\n  return {\n    type: DappKitRequestTypes.SIGN_TX,\n    status: DappKitResponseStatus.SUCCESS,\n    rawTxs: rawTxs\n  };\n};\n\nexports.SignTxResponseSuccess = SignTxResponseSuccess;\n\nfunction produceResponseDeeplink(request, response) {\n  var params = {\n    type: response.type,\n    status: response.status,\n    requestId: request.requestId\n  };\n\n  switch (response.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.account = response.address;\n        params.phoneNumber = response.phoneNumber;\n      }\n\n      break;\n\n    case DappKitRequestTypes.SIGN_TX:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.rawTxs = response.rawTxs;\n      }\n\n    default:\n      break;\n  }\n\n  return request.callback + '?' + (0, querystring_1.stringify)(params);\n}\n\nexports.produceResponseDeeplink = produceResponseDeeplink;\n\nvar SignTxRequest = function (txs, meta) {\n  return __assign({\n    type: DappKitRequestTypes.SIGN_TX,\n    txs: txs.map(function (tx) {\n      return {\n        txData: tx.txData,\n        estimatedGas: tx.estimatedGas,\n        from: tx.from,\n        to: tx.to,\n        nonce: tx.nonce,\n        feeCurrencyAddress: tx.feeCurrencyAddress,\n        value: tx.value\n      };\n    })\n  }, meta);\n};\n\nexports.SignTxRequest = SignTxRequest;\n\nfunction assertString(objectName, key, value) {\n  if (value === undefined) {\n    throw new Error(\"Expected \" + objectName + \" to contain \" + key);\n  }\n\n  if (typeof value !== 'string') {\n    throw new Error(\"Expected \" + objectName + \"[\" + key + \"] to be a string, but is \" + typeof value);\n  }\n\n  return;\n}\n\nfunction serializeDappKitRequestDeeplink(request) {\n  // TODO: Probably use a proper validation library here\n  assertString('request', 'type', request.type);\n  assertString('request', 'requestId', request.requestId);\n  assertString('request', 'callback', request.callback);\n  assertString('request', 'dappName', request.dappName);\n  var params = {\n    type: request.type,\n    requestId: request.requestId,\n    callback: request.callback,\n    dappName: request.dappName\n  };\n\n  switch (request.type) {\n    case DappKitRequestTypes.SIGN_TX:\n      params = __assign(__assign({}, params), {\n        txs: Buffer.from(JSON.stringify(request.txs), 'utf8').toString('base64')\n      });\n      break;\n\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      break;\n\n    default:\n      throw new Error(\"Invalid DappKitRequest type: \" + JSON.stringify(request));\n  }\n\n  return exports.DAPPKIT_BASE_HOST + '?' + (0, querystring_1.stringify)(params);\n}\n\nexports.serializeDappKitRequestDeeplink = serializeDappKitRequestDeeplink; // TODO: parsing query params yields broad types\n// once interface stabilizes, properly type the parsing\n\nfunction parseDappkitResponseDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n\n  if (rawParams.query.requestId === undefined) {\n    throw new Error('Invalid Deeplink: does not contain requestId');\n  }\n\n  var requestId = rawParams.query.requestId;\n  var address = rawParams.query.account;\n  var phoneNumber = rawParams.query.phoneNumber;\n\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        // @ts-ignore\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.SUCCESS,\n          address: address,\n          phoneNumber: phoneNumber,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n\n    case DappKitRequestTypes.SIGN_TX:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        var rawTxs = rawParams.query.rawTxs;\n\n        if (typeof rawTxs === 'string') {\n          rawTxs = [rawTxs];\n        } // @ts-ignore\n\n\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.SUCCESS,\n          rawTxs: rawTxs,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\n\nexports.parseDappkitResponseDeeplink = parseDappkitResponseDeeplink;\n\nfunction parseDappKitRequestDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n\n  if (!rawParams.query.dappName || !rawParams.query.callback || !rawParams.query.requestId) {\n    throw new Error(\"Invalid Deeplink: Does not contain meta parameters: \" + url);\n  }\n\n  var requestMeta = {\n    // @ts-ignore\n    callback: rawParams.query.callback,\n    // @ts-ignore\n    requestId: rawParams.query.requestId,\n    // @ts-ignore\n    dappName: rawParams.query.dappName\n  };\n\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      return (0, exports.AccountAuthRequest)(requestMeta);\n      break;\n\n    case DappKitRequestTypes.SIGN_TX:\n      // @ts-ignore\n      return __assign({\n        type: DappKitRequestTypes.SIGN_TX,\n        // @ts-ignore\n        txs: JSON.parse(Buffer.from(rawParams.query.txs, 'base64').toString('utf8'))\n      }, requestMeta);\n\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\n\nexports.parseDappKitRequestDeeplink = parseDappKitRequestDeeplink;","map":{"version":3,"sources":["../src/dappkit.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AAEa,OAAA,CAAA,iBAAA,GAAoB,uBAApB;AACb,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;EAC7B,mBAAA,CAAA,iBAAA,CAAA,GAAA,iBAAA;EACA,mBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACD,CAHD,EAAY,mBAAmB,GAAnB,OAAA,CAAA,mBAAA,KAAA,OAAA,CAAA,mBAAA,GAAmB,EAAnB,CAAZ;;AAKA,IAAY,qBAAZ;;AAAA,CAAA,UAAY,qBAAZ,EAAiC;EAC/B,qBAAA,CAAA,SAAA,CAAA,GAAA,KAAA;EACA,qBAAA,CAAA,cAAA,CAAA,GAAA,KAAA;AACD,CAHD,EAAY,qBAAqB,GAArB,OAAA,CAAA,qBAAA,KAAA,OAAA,CAAA,qBAAA,GAAqB,EAArB,CAAZ;;AAsBO,IAAM,kBAAkB,GAAG,UAAC,IAAD,EAAyB;EAAyB,OAAA,QAAA,CAAA;IAClF,IAAI,EAAE,mBAAmB,CAAC;EADwD,CAAA,EAAA,IAAA,CAAA;AAGlF,CAHK;;AAAM,OAAA,CAAA,kBAAA,GAAkB,kBAAlB;;AAaN,IAAM,0BAA0B,GAAG,UACxC,OADwC,EAExC,WAFwC,EAGxC,MAHwC,EAGd;EACK,OAAC;IAChC,IAAI,EAAE,mBAAmB,CAAC,eADM;IAEhC,MAAM,EAAE,qBAAqB,CAAC,OAFE;IAGhC,OAAO,EAAA,OAHyB;IAIhC,WAAW,EAAA,WAJqB;IAKhC,MAAM,EAAA;EAL0B,CAAD;AAM/B,CAVK;;AAAM,OAAA,CAAA,0BAAA,GAA0B,0BAA1B;;AAyBN,IAAM,qBAAqB,GAAG,UAAC,MAAD,EAAiB;EAA4B,OAAC;IACjF,IAAI,EAAE,mBAAmB,CAAC,OADuD;IAEjF,MAAM,EAAE,qBAAqB,CAAC,OAFmD;IAGjF,MAAM,EAAA;EAH2E,CAAD;AAIhF,CAJK;;AAAM,OAAA,CAAA,qBAAA,GAAqB,qBAArB;;AAeb,SAAgB,uBAAhB,CAAwC,OAAxC,EAAiE,QAAjE,EAA0F;EACxF,IAAM,MAAM,GAAQ;IAAE,IAAI,EAAE,QAAQ,CAAC,IAAjB;IAAuB,MAAM,EAAE,QAAQ,CAAC,MAAxC;IAAgD,SAAS,EAAE,OAAO,CAAC;EAAnE,CAApB;;EACA,QAAQ,QAAQ,CAAC,IAAjB;IACE,KAAK,mBAAmB,CAAC,eAAzB;MACE,IAAI,QAAQ,CAAC,MAAT,KAAoB,qBAAqB,CAAC,OAA9C,EAAuD;QACrD,MAAM,CAAC,OAAP,GAAiB,QAAQ,CAAC,OAA1B;QACA,MAAM,CAAC,WAAP,GAAqB,QAAQ,CAAC,WAA9B;MACD;;MACD;;IACF,KAAK,mBAAmB,CAAC,OAAzB;MACE,IAAI,QAAQ,CAAC,MAAT,KAAoB,qBAAqB,CAAC,OAA9C,EAAuD;QACrD,MAAM,CAAC,MAAP,GAAgB,QAAQ,CAAC,MAAzB;MACD;;IACH;MACE;EAZJ;;EAeA,OAAO,OAAO,CAAC,QAAR,GAAmB,GAAnB,GAAyB,CAAA,GAAA,aAAA,CAAA,SAAA,EAAU,MAAV,CAAhC;AACD;;AAlBD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAmCO,IAAM,aAAa,GAAG,UAAC,GAAD,EAAuB,IAAvB,EAA+C;EAAoB,OAAA,QAAA,CAAA;IAC9F,IAAI,EAAE,mBAAmB,CAAC,OADoE;IAE9F,GAAG,EAAE,GAAG,CAAC,GAAJ,CAAQ,UAAC,EAAD,EAAG;MAAK,OAAC;QACpB,MAAM,EAAE,EAAE,CAAC,MADS;QAEpB,YAAY,EAAE,EAAE,CAAC,YAFG;QAGpB,IAAI,EAAE,EAAE,CAAC,IAHW;QAIpB,EAAE,EAAE,EAAE,CAAC,EAJa;QAKpB,KAAK,EAAE,EAAE,CAAC,KALU;QAMpB,kBAAkB,EAAE,EAAE,CAAC,kBANH;QAOpB,KAAK,EAAE,EAAE,CAAC;MAPU,CAAD;IAQnB,CARG;EAFyF,CAAA,EAAA,IAAA,CAAA;AAY9F,CAZK;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;;AAgBb,SAAS,YAAT,CAAsB,UAAtB,EAA0C,GAA1C,EAAuD,KAAvD,EAAiE;EAC/D,IAAI,KAAK,KAAK,SAAd,EAAyB;IACvB,MAAM,IAAI,KAAJ,CAAU,cAAY,UAAZ,GAAsB,cAAtB,GAAqC,GAA/C,CAAN;EACD;;EAED,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;IAC7B,MAAM,IAAI,KAAJ,CAAU,cAAY,UAAZ,GAAsB,GAAtB,GAA0B,GAA1B,GAA6B,2BAA7B,GAAyD,OAAO,KAA1E,CAAN;EACD;;EAED;AACD;;AAED,SAAgB,+BAAhB,CAAgD,OAAhD,EAAuE;EACrE;EACA,YAAY,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAAO,CAAC,IAA5B,CAAZ;EACA,YAAY,CAAC,SAAD,EAAY,WAAZ,EAAyB,OAAO,CAAC,SAAjC,CAAZ;EACA,YAAY,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAO,CAAC,QAAhC,CAAZ;EACA,YAAY,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAO,CAAC,QAAhC,CAAZ;EAEA,IAAI,MAAM,GAAQ;IAChB,IAAI,EAAE,OAAO,CAAC,IADE;IAEhB,SAAS,EAAE,OAAO,CAAC,SAFH;IAGhB,QAAQ,EAAE,OAAO,CAAC,QAHF;IAIhB,QAAQ,EAAE,OAAO,CAAC;EAJF,CAAlB;;EAMA,QAAQ,OAAO,CAAC,IAAhB;IACE,KAAK,mBAAmB,CAAC,OAAzB;MACE,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACD,MADC,CAAA,EACK;QACT,GAAG,EAAE,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,SAAL,CAAe,OAAO,CAAC,GAAvB,CAAZ,EAAyC,MAAzC,EAAiD,QAAjD,CAA0D,QAA1D;MADI,CADL,CAAN;MAIA;;IACF,KAAK,mBAAmB,CAAC,eAAzB;MACE;;IACF;MACE,MAAM,IAAI,KAAJ,CAAU,kCAAgC,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1C,CAAN;EAVJ;;EAaA,OAAO,OAAA,CAAA,iBAAA,GAAoB,GAApB,GAA0B,CAAA,GAAA,aAAA,CAAA,SAAA,EAAU,MAAV,CAAjC;AACD;;AA3BD,OAAA,CAAA,+BAAA,GAAA,+BAAA,C,CA6BA;AACA;;AACA,SAAgB,4BAAhB,CAA6C,GAA7C,EAAwD;EACtD,IAAM,SAAS,GAAG,CAAA,GAAA,KAAA,CAAA,KAAA,EAAM,GAAN,EAAW,IAAX,CAAlB;;EACA,IAAI,SAAS,CAAC,KAAV,CAAgB,IAAhB,KAAyB,SAA7B,EAAwC;IACtC,MAAM,IAAI,KAAJ,CAAU,6CAA6C,GAAvD,CAAN;EACD;;EAED,IAAI,SAAS,CAAC,KAAV,CAAgB,SAAhB,KAA8B,SAAlC,EAA6C;IAC3C,MAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;EACD;;EAED,IAAM,SAAS,GAAG,SAAS,CAAC,KAAV,CAAgB,SAAlC;EACA,IAAM,OAAO,GAAG,SAAS,CAAC,KAAV,CAAgB,OAAhC;EACA,IAAM,WAAW,GAAG,SAAS,CAAC,KAAV,CAAgB,WAApC;;EAEA,QAAQ,SAAS,CAAC,KAAV,CAAgB,IAAxB;IACE,KAAK,mBAAmB,CAAC,eAAzB;MACE,IAAI,SAAS,CAAC,KAAV,CAAgB,MAAhB,KAA2B,qBAAqB,CAAC,OAArD,EAA8D;QAC5D;QACA,OAAO;UACL,IAAI,EAAE,mBAAmB,CAAC,eADrB;UAEL,MAAM,EAAE,qBAAqB,CAAC,OAFzB;UAGL,OAAO,EAAA,OAHF;UAIL,WAAW,EAAA,WAJN;UAKL,SAAS,EAAA;QALJ,CAAP;MAOD,CATD,MASO;QACL,OAAO;UACL,IAAI,EAAE,mBAAmB,CAAC,eADrB;UAEL,MAAM,EAAE,qBAAqB,CAAC,YAFzB;UAGL,SAAS,EAAA;QAHJ,CAAP;MAKD;;IACH,KAAK,mBAAmB,CAAC,OAAzB;MACE,IAAI,SAAS,CAAC,KAAV,CAAgB,MAAhB,KAA2B,qBAAqB,CAAC,OAArD,EAA8D;QAC5D,IAAI,MAAM,GAAG,SAAS,CAAC,KAAV,CAAgB,MAA7B;;QACA,IAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;UAC9B,MAAM,GAAG,CAAC,MAAD,CAAT;QACD,CAJ2D,CAK5D;;;QACA,OAAO;UACL,IAAI,EAAE,mBAAmB,CAAC,OADrB;UAEL,MAAM,EAAE,qBAAqB,CAAC,OAFzB;UAGL,MAAM,EAAE,MAHH;UAIL,SAAS,EAAA;QAJJ,CAAP;MAMD,CAZD,MAYO;QACL,OAAO;UACL,IAAI,EAAE,mBAAmB,CAAC,OADrB;UAEL,MAAM,EAAE,qBAAqB,CAAC,YAFzB;UAGL,SAAS,EAAA;QAHJ,CAAP;MAKD;;IACH;MACE,MAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN;EAvCJ;AAyCD;;AAvDD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAyDA,SAAgB,2BAAhB,CAA4C,GAA5C,EAAuD;EACrD,IAAM,SAAS,GAAG,CAAA,GAAA,KAAA,CAAA,KAAA,EAAM,GAAN,EAAW,IAAX,CAAlB;;EAEA,IAAI,SAAS,CAAC,KAAV,CAAgB,IAAhB,KAAyB,SAA7B,EAAwC;IACtC,MAAM,IAAI,KAAJ,CAAU,6CAA6C,GAAvD,CAAN;EACD;;EAED,IAAI,CAAC,SAAS,CAAC,KAAV,CAAgB,QAAjB,IAA6B,CAAC,SAAS,CAAC,KAAV,CAAgB,QAA9C,IAA0D,CAAC,SAAS,CAAC,KAAV,CAAgB,SAA/E,EAA0F;IACxF,MAAM,IAAI,KAAJ,CAAU,yDAAyD,GAAnE,CAAN;EACD;;EAED,IAAM,WAAW,GAAuB;IACtC;IACA,QAAQ,EAAE,SAAS,CAAC,KAAV,CAAgB,QAFY;IAGtC;IACA,SAAS,EAAE,SAAS,CAAC,KAAV,CAAgB,SAJW;IAKtC;IACA,QAAQ,EAAE,SAAS,CAAC,KAAV,CAAgB;EANY,CAAxC;;EASA,QAAQ,SAAS,CAAC,KAAV,CAAgB,IAAxB;IACE,KAAK,mBAAmB,CAAC,eAAzB;MACE,OAAO,CAAA,GAAA,OAAA,CAAA,kBAAA,EAAmB,WAAnB,CAAP;MACA;;IACF,KAAK,mBAAmB,CAAC,OAAzB;MACE;MACA,OAAA,QAAA,CAAA;QACE,IAAI,EAAE,mBAAmB,CAAC,OAD5B;QAEE;QACA,GAAG,EAAE,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,KAAV,CAAgB,GAA5B,EAAiC,QAAjC,EAA2C,QAA3C,CAAoD,MAApD,CAAX;MAHP,CAAA,EAIK,WAJL,CAAA;;IAMF;MACE,MAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN;EAbJ;AAeD;;AAnCD,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDappKitRequestDeeplink = exports.parseDappkitResponseDeeplink = exports.serializeDappKitRequestDeeplink = exports.SignTxRequest = exports.produceResponseDeeplink = exports.SignTxResponseSuccess = exports.AccountAuthResponseSuccess = exports.AccountAuthRequest = exports.DappKitResponseStatus = exports.DappKitRequestTypes = exports.DAPPKIT_BASE_HOST = void 0;\nvar querystring_1 = require(\"querystring\");\nvar url_1 = require(\"url\");\nexports.DAPPKIT_BASE_HOST = 'celo://wallet/dappkit';\nvar DappKitRequestTypes;\n(function (DappKitRequestTypes) {\n    DappKitRequestTypes[\"ACCOUNT_ADDRESS\"] = \"account_address\";\n    DappKitRequestTypes[\"SIGN_TX\"] = \"sign_tx\";\n})(DappKitRequestTypes = exports.DappKitRequestTypes || (exports.DappKitRequestTypes = {}));\nvar DappKitResponseStatus;\n(function (DappKitResponseStatus) {\n    DappKitResponseStatus[\"SUCCESS\"] = \"200\";\n    DappKitResponseStatus[\"UNAUTHORIZED\"] = \"401\";\n})(DappKitResponseStatus = exports.DappKitResponseStatus || (exports.DappKitResponseStatus = {}));\nvar AccountAuthRequest = function (meta) { return (__assign({ type: DappKitRequestTypes.ACCOUNT_ADDRESS }, meta)); };\nexports.AccountAuthRequest = AccountAuthRequest;\nvar AccountAuthResponseSuccess = function (address, phoneNumber, pepper) { return ({\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n    status: DappKitResponseStatus.SUCCESS,\n    address: address,\n    phoneNumber: phoneNumber,\n    pepper: pepper,\n}); };\nexports.AccountAuthResponseSuccess = AccountAuthResponseSuccess;\nvar SignTxResponseSuccess = function (rawTxs) { return ({\n    type: DappKitRequestTypes.SIGN_TX,\n    status: DappKitResponseStatus.SUCCESS,\n    rawTxs: rawTxs,\n}); };\nexports.SignTxResponseSuccess = SignTxResponseSuccess;\nfunction produceResponseDeeplink(request, response) {\n    var params = { type: response.type, status: response.status, requestId: request.requestId };\n    switch (response.type) {\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            if (response.status === DappKitResponseStatus.SUCCESS) {\n                params.account = response.address;\n                params.phoneNumber = response.phoneNumber;\n            }\n            break;\n        case DappKitRequestTypes.SIGN_TX:\n            if (response.status === DappKitResponseStatus.SUCCESS) {\n                params.rawTxs = response.rawTxs;\n            }\n        default:\n            break;\n    }\n    return request.callback + '?' + (0, querystring_1.stringify)(params);\n}\nexports.produceResponseDeeplink = produceResponseDeeplink;\nvar SignTxRequest = function (txs, meta) { return (__assign({ type: DappKitRequestTypes.SIGN_TX, txs: txs.map(function (tx) { return ({\n        txData: tx.txData,\n        estimatedGas: tx.estimatedGas,\n        from: tx.from,\n        to: tx.to,\n        nonce: tx.nonce,\n        feeCurrencyAddress: tx.feeCurrencyAddress,\n        value: tx.value,\n    }); }) }, meta)); };\nexports.SignTxRequest = SignTxRequest;\nfunction assertString(objectName, key, value) {\n    if (value === undefined) {\n        throw new Error(\"Expected \" + objectName + \" to contain \" + key);\n    }\n    if (typeof value !== 'string') {\n        throw new Error(\"Expected \" + objectName + \"[\" + key + \"] to be a string, but is \" + typeof value);\n    }\n    return;\n}\nfunction serializeDappKitRequestDeeplink(request) {\n    // TODO: Probably use a proper validation library here\n    assertString('request', 'type', request.type);\n    assertString('request', 'requestId', request.requestId);\n    assertString('request', 'callback', request.callback);\n    assertString('request', 'dappName', request.dappName);\n    var params = {\n        type: request.type,\n        requestId: request.requestId,\n        callback: request.callback,\n        dappName: request.dappName,\n    };\n    switch (request.type) {\n        case DappKitRequestTypes.SIGN_TX:\n            params = __assign(__assign({}, params), { txs: Buffer.from(JSON.stringify(request.txs), 'utf8').toString('base64') });\n            break;\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            break;\n        default:\n            throw new Error(\"Invalid DappKitRequest type: \" + JSON.stringify(request));\n    }\n    return exports.DAPPKIT_BASE_HOST + '?' + (0, querystring_1.stringify)(params);\n}\nexports.serializeDappKitRequestDeeplink = serializeDappKitRequestDeeplink;\n// TODO: parsing query params yields broad types\n// once interface stabilizes, properly type the parsing\nfunction parseDappkitResponseDeeplink(url) {\n    var rawParams = (0, url_1.parse)(url, true);\n    if (rawParams.query.type === undefined) {\n        throw new Error('Invalid Deeplink: does not contain type:' + url);\n    }\n    if (rawParams.query.requestId === undefined) {\n        throw new Error('Invalid Deeplink: does not contain requestId');\n    }\n    var requestId = rawParams.query.requestId;\n    var address = rawParams.query.account;\n    var phoneNumber = rawParams.query.phoneNumber;\n    switch (rawParams.query.type) {\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n                // @ts-ignore\n                return {\n                    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n                    status: DappKitResponseStatus.SUCCESS,\n                    address: address,\n                    phoneNumber: phoneNumber,\n                    requestId: requestId,\n                };\n            }\n            else {\n                return {\n                    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n                    status: DappKitResponseStatus.UNAUTHORIZED,\n                    requestId: requestId,\n                };\n            }\n        case DappKitRequestTypes.SIGN_TX:\n            if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n                var rawTxs = rawParams.query.rawTxs;\n                if (typeof rawTxs === 'string') {\n                    rawTxs = [rawTxs];\n                }\n                // @ts-ignore\n                return {\n                    type: DappKitRequestTypes.SIGN_TX,\n                    status: DappKitResponseStatus.SUCCESS,\n                    rawTxs: rawTxs,\n                    requestId: requestId,\n                };\n            }\n            else {\n                return {\n                    type: DappKitRequestTypes.SIGN_TX,\n                    status: DappKitResponseStatus.UNAUTHORIZED,\n                    requestId: requestId,\n                };\n            }\n        default:\n            throw new Error('Invalid Deeplink: does not match defined requests');\n    }\n}\nexports.parseDappkitResponseDeeplink = parseDappkitResponseDeeplink;\nfunction parseDappKitRequestDeeplink(url) {\n    var rawParams = (0, url_1.parse)(url, true);\n    if (rawParams.query.type === undefined) {\n        throw new Error('Invalid Deeplink: does not contain type:' + url);\n    }\n    if (!rawParams.query.dappName || !rawParams.query.callback || !rawParams.query.requestId) {\n        throw new Error(\"Invalid Deeplink: Does not contain meta parameters: \" + url);\n    }\n    var requestMeta = {\n        // @ts-ignore\n        callback: rawParams.query.callback,\n        // @ts-ignore\n        requestId: rawParams.query.requestId,\n        // @ts-ignore\n        dappName: rawParams.query.dappName,\n    };\n    switch (rawParams.query.type) {\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            return (0, exports.AccountAuthRequest)(requestMeta);\n            break;\n        case DappKitRequestTypes.SIGN_TX:\n            // @ts-ignore\n            return __assign({ type: DappKitRequestTypes.SIGN_TX, \n                // @ts-ignore\n                txs: JSON.parse(Buffer.from(rawParams.query.txs, 'base64').toString('utf8')) }, requestMeta);\n        default:\n            throw new Error('Invalid Deeplink: does not match defined requests');\n    }\n}\nexports.parseDappKitRequestDeeplink = parseDappKitRequestDeeplink;\n//# sourceMappingURL=dappkit.js.map"]},"metadata":{},"sourceType":"script"}