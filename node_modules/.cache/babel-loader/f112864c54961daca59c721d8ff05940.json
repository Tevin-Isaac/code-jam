{"ast":null,"code":"/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\"Please enable Contract data on the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nexport default class Eth {\n  constructor(transport) {\n    let scrambleKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"w0w\";\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  getAddress(path, boolDisplay, boolChaincode) {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(response => {\n      let result = {};\n      let publicKeyLength = response[0];\n      let addressLength = response[1 + publicKeyLength];\n      result.publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n      result.address = \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\");\n\n      if (boolChaincode) {\n        result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\");\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n\n\n  provideERC20TokenInformation(_ref) {\n    let {\n      data\n    } = _ref;\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n\n\n  signTransaction(path, rawTxHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response.slice(0, 1).toString(\"hex\");\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    }, e => {\n      throw remapTransactionRelatedErrors(e);\n    });\n  }\n  /**\n   */\n\n\n  getAppConfiguration() {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signPersonalMessage(path, messageHex) {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return foreach(toSend, (data, i) => this.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n\n}","map":{"version":3,"sources":["../src/Eth.js"],"names":["remapTransactionRelatedErrors","e","transport","constructor","scrambleKey","getAddress","paths","splitPath","buffer","Buffer","boolDisplay","boolChaincode","response","result","publicKeyLength","addressLength","provideERC20TokenInformation","data","signTransaction","offset","rawTx","toSend","maxChunkSize","chunkSize","i","apduResponse","v","r","s","getAppConfiguration","signPersonalMessage","message"],"mappings":"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","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport type Transport from \"@ledgerhq/hw-transport\";\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Contract data on the Ethereum app Settings\"\n    );\n  }\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\nexport default class Eth {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"w0w\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\"\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chainCode?: string\n  }> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then(response => {\n        let result = {};\n        let publicKeyLength = response[0];\n        let addressLength = response[1 + publicKeyLength];\n        result.publicKey = response\n          .slice(1, 1 + publicKeyLength)\n          .toString(\"hex\");\n        result.address =\n          \"0x\" +\n          response\n            .slice(\n              1 + publicKeyLength + 1,\n              1 + publicKeyLength + 1 + addressLength\n            )\n            .toString(\"ascii\");\n        if (boolChaincode) {\n          result.chainCode = response\n            .slice(\n              1 + publicKeyLength + 1 + addressLength,\n              1 + publicKeyLength + 1 + addressLength + 32\n            )\n            .toString(\"hex\");\n        }\n        return result;\n      });\n  }\n\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n      () => true,\n      e => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n          // we return a flag to know if the call was effective or not\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n  signTransaction(\n    path: string,\n    rawTxHex: string\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(\n      () => {\n        const v = response.slice(0, 1).toString(\"hex\");\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      },\n      e => {\n        throw remapTransactionRelatedErrors(e);\n      }\n    );\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number,\n    version: string\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\neth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return { v, r, s };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}