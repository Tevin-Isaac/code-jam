{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Countries = void 0;\n\nvar country_data_1 = __importDefault(require(\"country-data\")); // more countries @ https://github.com/umpirsky/country-list\n\n\nvar country_json_1 = __importDefault(require(\"./data/countries/es/country.json\"));\n\nvar phoneNumbers_1 = require(\"./phoneNumbers\");\n\nvar removeDiacritics = function (word) {\n  return word && word.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase().trim();\n};\n\nvar matchCountry = function (country, query) {\n  return country.displayNameNoDiacritics.startsWith(query) || country.countryCallingCode.startsWith('+' + query) || country.alpha3.startsWith(query.toUpperCase());\n};\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\n\n\nvar Countries =\n/** @class */\nfunction () {\n  function Countries(language) {\n    // fallback to 'en-us'\n    this.language = language ? language.toLocaleLowerCase() : 'en-us';\n    this.countryMap = new Map();\n    this.localizedCountries = Array();\n    this.assignCountries();\n  }\n\n  Countries.prototype.getCountry = function (countryName) {\n    if (!countryName) {\n      return undefined;\n    }\n\n    var query = removeDiacritics(countryName);\n    return this.localizedCountries.find(function (country) {\n      return country.displayNameNoDiacritics === query;\n    });\n  };\n\n  Countries.prototype.getCountryByCodeAlpha2 = function (countryCode) {\n    return this.countryMap.get(countryCode);\n  };\n\n  Countries.prototype.getFilteredCountries = function (query) {\n    query = removeDiacritics(query); // Return full list if the query is empty\n\n    if (!query || !query.length) {\n      return this.localizedCountries;\n    }\n\n    return this.localizedCountries.filter(function (country) {\n      return matchCountry(country, query);\n    });\n  };\n\n  Countries.prototype.assignCountries = function () {\n    var _this = this; // add other languages to country data\n\n\n    this.localizedCountries = country_data_1.default.callingCountries.all.map(function (country) {\n      // this is assuming these two are the only cases, in i18n.ts seems like there\n      // are fallback languages 'es-US' and 'es-LA' that are not covered\n      var names = {\n        'en-us': country.name,\n        // @ts-ignore\n        'es-419': country_json_1.default[country.alpha2]\n      };\n      var displayName = names[_this.language] || country.name; // We only use the first calling code, others are irrelevant in the current dataset.\n      // Also some of them have a non standard calling code\n      // for instance: 'Antigua And Barbuda' has '+1 268', where only '+1' is expected\n      // so we fix this here\n\n      var countryCallingCode = country.countryCallingCodes[0].split(' ')[0];\n\n      var localizedCountry = __assign(__assign({\n        names: names,\n        displayName: displayName,\n        displayNameNoDiacritics: removeDiacritics(displayName),\n        countryPhonePlaceholder: {\n          national: (0, phoneNumbers_1.getExampleNumber)(countryCallingCode) // Not needed right now\n          // international: getExampleNumber(countryCallingCode, true, true),\n\n        },\n        countryCallingCode: countryCallingCode\n      }, country), {\n        // Use default emoji when flag emoji is missing\n        emoji: country.emoji || '🏳'\n      }); // use ISO 3166-1 alpha2 code as country id\n\n\n      _this.countryMap.set(country.alpha2.toUpperCase(), localizedCountry);\n\n      return localizedCountry;\n    }).sort(function (a, b) {\n      return a.displayName.localeCompare(b.displayName);\n    });\n  };\n\n  return Countries;\n}();\n\nexports.Countries = Countries;","map":{"version":3,"sources":["../src/countries.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Countries = void 0;\nvar country_data_1 = __importDefault(require(\"country-data\"));\n// more countries @ https://github.com/umpirsky/country-list\nvar country_json_1 = __importDefault(require(\"./data/countries/es/country.json\"));\nvar phoneNumbers_1 = require(\"./phoneNumbers\");\nvar removeDiacritics = function (word) {\n    return word &&\n        word\n            .normalize('NFD')\n            .replace(/[\\u0300-\\u036f]/g, '')\n            .toLowerCase()\n            .trim();\n};\nvar matchCountry = function (country, query) {\n    return (country.displayNameNoDiacritics.startsWith(query) ||\n        country.countryCallingCode.startsWith('+' + query) ||\n        country.alpha3.startsWith(query.toUpperCase()));\n};\n/**\n * @deprecated moved to @celo/phone-utils will be removed in next major version\n */\nvar Countries = /** @class */ (function () {\n    function Countries(language) {\n        // fallback to 'en-us'\n        this.language = language ? language.toLocaleLowerCase() : 'en-us';\n        this.countryMap = new Map();\n        this.localizedCountries = Array();\n        this.assignCountries();\n    }\n    Countries.prototype.getCountry = function (countryName) {\n        if (!countryName) {\n            return undefined;\n        }\n        var query = removeDiacritics(countryName);\n        return this.localizedCountries.find(function (country) { return country.displayNameNoDiacritics === query; });\n    };\n    Countries.prototype.getCountryByCodeAlpha2 = function (countryCode) {\n        return this.countryMap.get(countryCode);\n    };\n    Countries.prototype.getFilteredCountries = function (query) {\n        query = removeDiacritics(query);\n        // Return full list if the query is empty\n        if (!query || !query.length) {\n            return this.localizedCountries;\n        }\n        return this.localizedCountries.filter(function (country) { return matchCountry(country, query); });\n    };\n    Countries.prototype.assignCountries = function () {\n        var _this = this;\n        // add other languages to country data\n        this.localizedCountries = country_data_1.default.callingCountries.all\n            .map(function (country) {\n            // this is assuming these two are the only cases, in i18n.ts seems like there\n            // are fallback languages 'es-US' and 'es-LA' that are not covered\n            var names = {\n                'en-us': country.name,\n                // @ts-ignore\n                'es-419': country_json_1.default[country.alpha2],\n            };\n            var displayName = names[_this.language] || country.name;\n            // We only use the first calling code, others are irrelevant in the current dataset.\n            // Also some of them have a non standard calling code\n            // for instance: 'Antigua And Barbuda' has '+1 268', where only '+1' is expected\n            // so we fix this here\n            var countryCallingCode = country.countryCallingCodes[0].split(' ')[0];\n            var localizedCountry = __assign(__assign({ names: names, displayName: displayName, displayNameNoDiacritics: removeDiacritics(displayName), countryPhonePlaceholder: {\n                    national: (0, phoneNumbers_1.getExampleNumber)(countryCallingCode),\n                    // Not needed right now\n                    // international: getExampleNumber(countryCallingCode, true, true),\n                }, countryCallingCode: countryCallingCode }, country), { \n                // Use default emoji when flag emoji is missing\n                emoji: country.emoji || '🏳' });\n            // use ISO 3166-1 alpha2 code as country id\n            _this.countryMap.set(country.alpha2.toUpperCase(), localizedCountry);\n            return localizedCountry;\n        })\n            .sort(function (a, b) { return a.displayName.localeCompare(b.displayName); });\n    };\n    return Countries;\n}());\nexports.Countries = Countries;\n//# sourceMappingURL=countries.js.map"]},"metadata":{},"sourceType":"script"}