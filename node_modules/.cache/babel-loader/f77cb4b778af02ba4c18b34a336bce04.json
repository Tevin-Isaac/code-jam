{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationUtils = exports.extractSecurityCodeWithPrefix = exports.attestToIdentifier = exports.getAttestationMessageToSignFromPhoneNumber = exports.getAttestationMessageToSignFromIdentifier = exports.hashIdentifier = exports.sanitizeMessageBase64 = exports.messageContainsAttestationCode = exports.isAccountConsideredVerified = exports.IdentifierType = exports.getIdentifierPrefix = exports.extractAttestationCodeFromMessage = exports.base64ToHex = void 0;\n\nvar attestations_1 = require(\"@celo/base/lib/attestations\");\n\nvar web3_utils_1 = require(\"web3-utils\");\n\nvar address_1 = require(\"./address\");\n\nvar signatureUtils_1 = require(\"./signatureUtils\"); // Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\n\n\nvar attestations_2 = require(\"@celo/base/lib/attestations\");\n\nObject.defineProperty(exports, \"base64ToHex\", {\n  enumerable: true,\n  get: function () {\n    return attestations_2.base64ToHex;\n  }\n});\nObject.defineProperty(exports, \"extractAttestationCodeFromMessage\", {\n  enumerable: true,\n  get: function () {\n    return attestations_2.extractAttestationCodeFromMessage;\n  }\n});\nObject.defineProperty(exports, \"getIdentifierPrefix\", {\n  enumerable: true,\n  get: function () {\n    return attestations_2.getIdentifierPrefix;\n  }\n});\nObject.defineProperty(exports, \"IdentifierType\", {\n  enumerable: true,\n  get: function () {\n    return attestations_2.IdentifierType;\n  }\n});\nObject.defineProperty(exports, \"isAccountConsideredVerified\", {\n  enumerable: true,\n  get: function () {\n    return attestations_2.isAccountConsideredVerified;\n  }\n});\nObject.defineProperty(exports, \"messageContainsAttestationCode\", {\n  enumerable: true,\n  get: function () {\n    return attestations_2.messageContainsAttestationCode;\n  }\n});\nObject.defineProperty(exports, \"sanitizeMessageBase64\", {\n  enumerable: true,\n  get: function () {\n    return attestations_2.sanitizeMessageBase64;\n  }\n});\n\nvar sha3 = function (v) {\n  return (0, web3_utils_1.soliditySha3)({\n    type: 'string',\n    value: v\n  });\n};\n\nfunction hashIdentifier(identifier, type, salt) {\n  return (0, attestations_1.hashIdentifier)(sha3, identifier, type, salt);\n}\n\nexports.hashIdentifier = hashIdentifier;\n\nfunction getAttestationMessageToSignFromIdentifier(identifier, account) {\n  var messageHash = (0, web3_utils_1.soliditySha3)({\n    type: 'bytes32',\n    value: identifier\n  }, {\n    type: 'address',\n    value: account\n  });\n  return messageHash;\n}\n\nexports.getAttestationMessageToSignFromIdentifier = getAttestationMessageToSignFromIdentifier;\n\nfunction getAttestationMessageToSignFromPhoneNumber(phoneNumber, account, phoneSalt) {\n  return getAttestationMessageToSignFromIdentifier(hashIdentifier(phoneNumber, attestations_1.IdentifierType.PHONE_NUMBER, phoneSalt), account);\n}\n\nexports.getAttestationMessageToSignFromPhoneNumber = getAttestationMessageToSignFromPhoneNumber;\n\nfunction attestToIdentifier(identifier, account, privateKey) {\n  var issuer = (0, address_1.privateKeyToAddress)(privateKey);\n\n  var _a = signatureUtils_1.SignatureUtils.signMessage(getAttestationMessageToSignFromIdentifier(identifier, account), privateKey, issuer),\n      v = _a.v,\n      r = _a.r,\n      s = _a.s;\n\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n}\n\nexports.attestToIdentifier = attestToIdentifier;\n\nfunction extractSecurityCodeWithPrefix(message) {\n  var matches = message.match('(\\\\d{8})');\n\n  if (matches && matches.length === 2) {\n    return matches[1];\n  }\n\n  return null;\n}\n\nexports.extractSecurityCodeWithPrefix = extractSecurityCodeWithPrefix;\nexports.AttestationUtils = {\n  IdentifierType: attestations_1.IdentifierType,\n  getIdentifierPrefix: attestations_1.getIdentifierPrefix,\n  hashIdentifier: hashIdentifier,\n  getAttestationMessageToSignFromIdentifier: getAttestationMessageToSignFromIdentifier,\n  getAttestationMessageToSignFromPhoneNumber: getAttestationMessageToSignFromPhoneNumber,\n  base64ToHex: attestations_1.base64ToHex,\n  attestToIdentifier: attestToIdentifier,\n  sanitizeMessageBase64: attestations_1.sanitizeMessageBase64,\n  messageContainsAttestationCode: attestations_1.messageContainsAttestationCode,\n  extractAttestationCodeFromMessage: attestations_1.extractAttestationCodeFromMessage,\n  isAccountConsideredVerified: attestations_1.isAccountConsideredVerified,\n  extractSecurityCodeWithPrefix: extractSecurityCodeWithPrefix\n};","map":{"version":3,"sources":["../src/attestations.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttestationUtils = exports.extractSecurityCodeWithPrefix = exports.attestToIdentifier = exports.getAttestationMessageToSignFromPhoneNumber = exports.getAttestationMessageToSignFromIdentifier = exports.hashIdentifier = exports.sanitizeMessageBase64 = exports.messageContainsAttestationCode = exports.isAccountConsideredVerified = exports.IdentifierType = exports.getIdentifierPrefix = exports.extractAttestationCodeFromMessage = exports.base64ToHex = void 0;\nvar attestations_1 = require(\"@celo/base/lib/attestations\");\nvar web3_utils_1 = require(\"web3-utils\");\nvar address_1 = require(\"./address\");\nvar signatureUtils_1 = require(\"./signatureUtils\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar attestations_2 = require(\"@celo/base/lib/attestations\");\nObject.defineProperty(exports, \"base64ToHex\", { enumerable: true, get: function () { return attestations_2.base64ToHex; } });\nObject.defineProperty(exports, \"extractAttestationCodeFromMessage\", { enumerable: true, get: function () { return attestations_2.extractAttestationCodeFromMessage; } });\nObject.defineProperty(exports, \"getIdentifierPrefix\", { enumerable: true, get: function () { return attestations_2.getIdentifierPrefix; } });\nObject.defineProperty(exports, \"IdentifierType\", { enumerable: true, get: function () { return attestations_2.IdentifierType; } });\nObject.defineProperty(exports, \"isAccountConsideredVerified\", { enumerable: true, get: function () { return attestations_2.isAccountConsideredVerified; } });\nObject.defineProperty(exports, \"messageContainsAttestationCode\", { enumerable: true, get: function () { return attestations_2.messageContainsAttestationCode; } });\nObject.defineProperty(exports, \"sanitizeMessageBase64\", { enumerable: true, get: function () { return attestations_2.sanitizeMessageBase64; } });\nvar sha3 = function (v) { return (0, web3_utils_1.soliditySha3)({ type: 'string', value: v }); };\nfunction hashIdentifier(identifier, type, salt) {\n    return (0, attestations_1.hashIdentifier)(sha3, identifier, type, salt);\n}\nexports.hashIdentifier = hashIdentifier;\nfunction getAttestationMessageToSignFromIdentifier(identifier, account) {\n    var messageHash = (0, web3_utils_1.soliditySha3)({ type: 'bytes32', value: identifier }, { type: 'address', value: account });\n    return messageHash;\n}\nexports.getAttestationMessageToSignFromIdentifier = getAttestationMessageToSignFromIdentifier;\nfunction getAttestationMessageToSignFromPhoneNumber(phoneNumber, account, phoneSalt) {\n    return getAttestationMessageToSignFromIdentifier(hashIdentifier(phoneNumber, attestations_1.IdentifierType.PHONE_NUMBER, phoneSalt), account);\n}\nexports.getAttestationMessageToSignFromPhoneNumber = getAttestationMessageToSignFromPhoneNumber;\nfunction attestToIdentifier(identifier, account, privateKey) {\n    var issuer = (0, address_1.privateKeyToAddress)(privateKey);\n    var _a = signatureUtils_1.SignatureUtils.signMessage(getAttestationMessageToSignFromIdentifier(identifier, account), privateKey, issuer), v = _a.v, r = _a.r, s = _a.s;\n    return { v: v, r: r, s: s };\n}\nexports.attestToIdentifier = attestToIdentifier;\nfunction extractSecurityCodeWithPrefix(message) {\n    var matches = message.match('(\\\\d{8})');\n    if (matches && matches.length === 2) {\n        return matches[1];\n    }\n    return null;\n}\nexports.extractSecurityCodeWithPrefix = extractSecurityCodeWithPrefix;\nexports.AttestationUtils = {\n    IdentifierType: attestations_1.IdentifierType,\n    getIdentifierPrefix: attestations_1.getIdentifierPrefix,\n    hashIdentifier: hashIdentifier,\n    getAttestationMessageToSignFromIdentifier: getAttestationMessageToSignFromIdentifier,\n    getAttestationMessageToSignFromPhoneNumber: getAttestationMessageToSignFromPhoneNumber,\n    base64ToHex: attestations_1.base64ToHex,\n    attestToIdentifier: attestToIdentifier,\n    sanitizeMessageBase64: attestations_1.sanitizeMessageBase64,\n    messageContainsAttestationCode: attestations_1.messageContainsAttestationCode,\n    extractAttestationCodeFromMessage: attestations_1.extractAttestationCodeFromMessage,\n    isAccountConsideredVerified: attestations_1.isAccountConsideredVerified,\n    extractSecurityCodeWithPrefix: extractSecurityCodeWithPrefix,\n};\n//# sourceMappingURL=attestations.js.map"]},"metadata":{},"sourceType":"script"}