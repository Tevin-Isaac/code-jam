{"ast":null,"code":"import semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\nconst devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: _firwareVersion => 4 * 1024\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: firmwareVersion => semver.lt(semver.coerce(firmwareVersion), \"2.0.0\") ? 4 * 1024 : 2 * 1024\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: _firwareVersion => 4 * 1024,\n    bluetoothSpec: [{\n      // this is the legacy one (prototype version). we will eventually drop it.\n      serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n      notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n      writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\"\n    }, {\n      serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n      notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n      writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\"\n    }]\n  }\n};\nconst productMap = {\n  Blue: \"blue\",\n  \"Nano S\": \"nanoS\",\n  \"Nano X\": \"nanoX\"\n}; // $FlowFixMe\n\nconst devicesList = Object.values(devices);\n/**\n *\n */\n\nexport const ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\n\nexport const getDeviceModel = id => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\n *\n */\n\nexport const identifyUSBProductId = usbProductId => {\n  const legacy = devicesList.find(d => d.legacyUsbProductId === usbProductId);\n  if (legacy) return legacy;\n  const mm = usbProductId >> 8;\n  const deviceModel = devicesList.find(d => d.productIdMM === mm);\n  return deviceModel;\n};\nexport const identifyProductName = productName => {\n  const productId = productMap[productName];\n  const deviceModel = devicesList.find(d => d.id === productId);\n  return deviceModel;\n};\nconst bluetoothServices = [];\nconst serviceUuidToInfos = {};\n\nfor (let id in devices) {\n  const deviceModel = devices[id];\n  const {\n    bluetoothSpec\n  } = deviceModel;\n\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = {\n        deviceModel,\n        ...spec\n      };\n    }\n  }\n}\n/**\n *\n */\n\n\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n/**\n *\n */\n\nexport const getInfosForServiceUuid = uuid => serviceUuidToInfos[uuid.toLowerCase()];\n/**\n *\n */","map":{"version":3,"sources":["../src/index.js"],"names":["IIGenericHID","IIKeyboardHID","IIU2F","IICCID","IIWebUSB","devices","blue","id","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","blockSize","getBlockSize","_firwareVersion","nanoS","firmwareVersion","semver","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","productMap","Blue","devicesList","Object","ledgerUSBVendorId","getDeviceModel","info","identifyUSBProductId","usbProductId","legacy","d","mm","deviceModel","identifyProductName","productId","bluetoothServices","serviceUuidToInfos","i","spec","getBluetoothServiceUuids","getInfosForServiceUuid","uuid"],"mappings":"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","sourcesContent":["// @flow\n\nimport semver from \"semver\";\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\n\nconst devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (firmwareVersion: string): number =>\n      semver.lt(semver.coerce(firmwareVersion), \"2.0.0\") ? 4 * 1024 : 2 * 1024,\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n    bluetoothSpec: [\n      {\n        // this is the legacy one (prototype version). we will eventually drop it.\n        serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n        notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n        writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\",\n      },\n      {\n        serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n      },\n    ],\n  },\n};\n\nconst productMap = {\n  Blue: \"blue\",\n  \"Nano S\": \"nanoS\",\n  \"Nano X\": \"nanoX\",\n};\n\n// $FlowFixMe\nconst devicesList: DeviceModel[] = Object.values(devices);\n\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n\n/**\n *\n */\nexport const getDeviceModel = (id: DeviceModelId): DeviceModel => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n\n/**\n *\n */\nexport const identifyUSBProductId = (usbProductId: number): ?DeviceModel => {\n  const legacy = devicesList.find((d) => d.legacyUsbProductId === usbProductId);\n  if (legacy) return legacy;\n\n  const mm = usbProductId >> 8;\n  const deviceModel = devicesList.find((d) => d.productIdMM === mm);\n  return deviceModel;\n};\n\nexport const identifyProductName = (productName: string): ?DeviceModel => {\n  const productId = productMap[productName];\n  const deviceModel = devicesList.find((d) => d.id === productId);\n\n  return deviceModel;\n};\n\nconst bluetoothServices: string[] = [];\nconst serviceUuidToInfos: {\n  [_: string]: BluetoothInfos,\n} = {};\n\nfor (let id in devices) {\n  const deviceModel = devices[id];\n  const { bluetoothSpec } = deviceModel;\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[\n        spec.serviceUuid.replace(/-/g, \"\")\n      ] = { deviceModel, ...spec };\n    }\n  }\n}\n\n/**\n *\n */\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n\n/**\n *\n */\nexport const getInfosForServiceUuid = (uuid: string): ?BluetoothInfos =>\n  serviceUuidToInfos[uuid.toLowerCase()];\n\n/**\n *\n */\nexport type DeviceModelId = $Keys<typeof devices>;\n\n/**\n *\n */\nexport type DeviceModel = {\n  id: DeviceModelId,\n  productName: string,\n  productIdMM: number,\n  legacyUsbProductId: number,\n  usbOnly: boolean,\n  memorySize: number,\n  // blockSize: number, // THIS FIELD IS DEPRECATED, use getBlockSize\n  getBlockSize: (firmwareVersion: string) => number,\n  bluetoothSpec?: Array<{\n    serviceUuid: string,\n    writeUuid: string,\n    notifyUuid: string,\n  }>,\n};\n\n/**\n *\n */\nexport type BluetoothInfos = {\n  deviceModel: DeviceModel,\n  serviceUuid: string,\n  writeUuid: string,\n  notifyUuid: string,\n};\n"]},"metadata":{},"sourceType":"module"}