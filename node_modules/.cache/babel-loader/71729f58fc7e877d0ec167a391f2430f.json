{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareLedgerAppVersions = exports.list = exports.tokenInfoByAddressAndChainId = void 0; // Copied from '@ledgerhq/hw-app-eth/erc20' because we need to change the path of the blob and support for address+chainId\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar data_1 = __importDefault(require(\"./data\"));\n/**\n * Retrieve the token information by a given contract address and chainId if any\n */\n\n\nvar tokenInfoByAddressAndChainId = function (contract, chainId) {\n  return get().byContractKey(generateContractKey(contract, chainId));\n};\n\nexports.tokenInfoByAddressAndChainId = tokenInfoByAddressAndChainId;\n/**\n * list all the ERC20 tokens informations\n */\n\nvar list = function () {\n  return get().list();\n};\n\nexports.list = list;\n/**\n * @return\n * -1: version1 < version2,\n *  0: version1 == version2,\n *  1: version1 > version2\n */\n\nfunction compareLedgerAppVersions(version1, version2) {\n  var numberV1 = stringVersionToNumber(version1);\n  var numberV2 = stringVersionToNumber(version2);\n  return numberV1 < numberV2 ? -1 : numberV1 === numberV2 ? 0 : 1;\n}\n\nexports.compareLedgerAppVersions = compareLedgerAppVersions;\n\nfunction stringVersionToNumber(version) {\n  var parts = version.split('.');\n  return parts.reduce(function (accum, part) {\n    return (accum + Number(part)) * 1000;\n  }, 0);\n}\n\nfunction generateContractKey(contract, chainId) {\n  return [(0, address_1.normalizeAddressWith0x)(contract), chainId].join('-');\n} // this internal get() will lazy load and cache the data from the erc20 data blob\n\n\nvar get = function () {\n  var cache;\n  return function () {\n    if (cache) {\n      return cache;\n    }\n\n    var buf = Buffer.from(data_1.default, 'base64');\n    var byContract = {};\n    var entries = [];\n    var i = 0;\n\n    while (i < buf.length) {\n      var length_1 = buf.readUInt32BE(i);\n      i += 4;\n      var item = buf.slice(i, i + length_1);\n      var j = 0;\n      var tickerLength = item.readUInt8(j);\n      j += 1;\n      var ticker = item.slice(j, j + tickerLength).toString('ascii');\n      j += tickerLength;\n      var contractAddress = (0, address_1.normalizeAddressWith0x)(item.slice(j, j + 20).toString('hex'));\n      j += 20;\n      var decimals = item.readUInt32BE(j);\n      j += 4;\n      var chainId = item.readUInt32BE(j);\n      j += 4;\n      var signature = item.slice(j);\n      var entry = {\n        ticker: ticker,\n        contractAddress: contractAddress,\n        decimals: decimals,\n        chainId: chainId,\n        signature: signature,\n        data: item\n      };\n      entries.push(entry);\n      byContract[generateContractKey(contractAddress, chainId)] = entry;\n      i += length_1;\n    }\n\n    var api = {\n      list: function () {\n        return entries;\n      },\n      byContractKey: function (id) {\n        return byContract[id];\n      }\n    };\n    cache = api;\n    return api;\n  };\n}();","map":{"version":3,"sources":["../src/tokens.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareLedgerAppVersions = exports.list = exports.tokenInfoByAddressAndChainId = void 0;\n// Copied from '@ledgerhq/hw-app-eth/erc20' because we need to change the path of the blob and support for address+chainId\nvar address_1 = require(\"@celo/base/lib/address\");\nvar data_1 = __importDefault(require(\"./data\"));\n/**\n * Retrieve the token information by a given contract address and chainId if any\n */\nvar tokenInfoByAddressAndChainId = function (contract, chainId) { return get().byContractKey(generateContractKey(contract, chainId)); };\nexports.tokenInfoByAddressAndChainId = tokenInfoByAddressAndChainId;\n/**\n * list all the ERC20 tokens informations\n */\nvar list = function () { return get().list(); };\nexports.list = list;\n/**\n * @return\n * -1: version1 < version2,\n *  0: version1 == version2,\n *  1: version1 > version2\n */\nfunction compareLedgerAppVersions(version1, version2) {\n    var numberV1 = stringVersionToNumber(version1);\n    var numberV2 = stringVersionToNumber(version2);\n    return numberV1 < numberV2 ? -1 : numberV1 === numberV2 ? 0 : 1;\n}\nexports.compareLedgerAppVersions = compareLedgerAppVersions;\nfunction stringVersionToNumber(version) {\n    var parts = version.split('.');\n    return parts.reduce(function (accum, part) { return (accum + Number(part)) * 1000; }, 0);\n}\nfunction generateContractKey(contract, chainId) {\n    return [(0, address_1.normalizeAddressWith0x)(contract), chainId].join('-');\n}\n// this internal get() will lazy load and cache the data from the erc20 data blob\nvar get = (function () {\n    var cache;\n    return function () {\n        if (cache) {\n            return cache;\n        }\n        var buf = Buffer.from(data_1.default, 'base64');\n        var byContract = {};\n        var entries = [];\n        var i = 0;\n        while (i < buf.length) {\n            var length_1 = buf.readUInt32BE(i);\n            i += 4;\n            var item = buf.slice(i, i + length_1);\n            var j = 0;\n            var tickerLength = item.readUInt8(j);\n            j += 1;\n            var ticker = item.slice(j, j + tickerLength).toString('ascii');\n            j += tickerLength;\n            var contractAddress = (0, address_1.normalizeAddressWith0x)(item.slice(j, j + 20).toString('hex'));\n            j += 20;\n            var decimals = item.readUInt32BE(j);\n            j += 4;\n            var chainId = item.readUInt32BE(j);\n            j += 4;\n            var signature = item.slice(j);\n            var entry = {\n                ticker: ticker,\n                contractAddress: contractAddress,\n                decimals: decimals,\n                chainId: chainId,\n                signature: signature,\n                data: item,\n            };\n            entries.push(entry);\n            byContract[generateContractKey(contractAddress, chainId)] = entry;\n            i += length_1;\n        }\n        var api = {\n            list: function () { return entries; },\n            byContractKey: function (id) { return byContract[id]; },\n        };\n        cache = api;\n        return api;\n    };\n})();\n//# sourceMappingURL=tokens.js.map"]},"metadata":{},"sourceType":"script"}