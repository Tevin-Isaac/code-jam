[{"/home/tevin/Documents/tracker/hodler/src/index.js":"1","/home/tevin/Documents/tracker/hodler/src/App.js":"2","/home/tevin/Documents/tracker/hodler/src/pages/itemRelist/itemRelist.jsx":"3","/home/tevin/Documents/tracker/hodler/src/pages/index.js":"4","/home/tevin/Documents/tracker/hodler/src/components/index.js":"5","/home/tevin/Documents/tracker/hodler/src/hooks/useMarketContract.js":"6","/home/tevin/Documents/tracker/hodler/src/pages/home/Home.jsx":"7","/home/tevin/Documents/tracker/hodler/src/pages/item/Item.jsx":"8","/home/tevin/Documents/tracker/hodler/src/pages/profile/Profile.jsx":"9","/home/tevin/Documents/tracker/hodler/src/pages/create/Create.jsx":"10","/home/tevin/Documents/tracker/hodler/src/components/navbar/Navbar.jsx":"11","/home/tevin/Documents/tracker/hodler/src/components/header/Header.jsx":"12","/home/tevin/Documents/tracker/hodler/src/components/nfts/Nfts.jsx":"13","/home/tevin/Documents/tracker/hodler/src/hooks/useContract.js":"14","/home/tevin/Documents/tracker/hodler/src/utils/helpers.js":"15","/home/tevin/Documents/tracker/hodler/src/utils/constants.js":"16","/home/tevin/Documents/tracker/hodler/src/components/footer/Footer.jsx":"17","/home/tevin/Documents/tracker/hodler/src/pages/crypto/crypto.js":"18"},{"size":1284,"mtime":1658506427115,"results":"19","hashOfConfig":"20"},{"size":787,"mtime":1658506224937,"results":"21","hashOfConfig":"20"},{"size":4212,"mtime":1658392597025,"results":"22","hashOfConfig":"20"},{"size":196,"mtime":1658506419943,"results":"23","hashOfConfig":"20"},{"size":200,"mtime":1658502740944,"results":"24","hashOfConfig":"20"},{"size":296,"mtime":1658392597025,"results":"25","hashOfConfig":"20"},{"size":1591,"mtime":1658392597025,"results":"26","hashOfConfig":"20"},{"size":2915,"mtime":1658392597025,"results":"27","hashOfConfig":"20"},{"size":2983,"mtime":1658392597025,"results":"28","hashOfConfig":"20"},{"size":5939,"mtime":1658450870403,"results":"29","hashOfConfig":"20"},{"size":2625,"mtime":1658506014186,"results":"30","hashOfConfig":"20"},{"size":1652,"mtime":1658447587110,"results":"31","hashOfConfig":"20"},{"size":1852,"mtime":1658392597021,"results":"32","hashOfConfig":"20"},{"size":642,"mtime":1658392597025,"results":"33","hashOfConfig":"20"},{"size":384,"mtime":1658392597025,"results":"34","hashOfConfig":"20"},{"size":54,"mtime":1658392597025,"results":"35","hashOfConfig":"20"},{"size":504,"mtime":1658449941041,"results":"36","hashOfConfig":"20"},{"size":0,"mtime":1658503746242,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fs1860",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/home/tevin/Documents/tracker/hodler/src/index.js",[],"/home/tevin/Documents/tracker/hodler/src/App.js",[],"/home/tevin/Documents/tracker/hodler/src/pages/itemRelist/itemRelist.jsx",["83","84","85","86"],"import React, {useEffect, useState} from 'react';\nimport './itemRelist.css'\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\nimport {useParams} from \"react-router\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst ItemRelist = () => {\n\n    const {id} = useParams()\n    const marketplace = useMarketContract()\n    const [nftData, setNftData] = useState({});\n    const {address, performActions} = useContractKit()\n\n    const navigate = useNavigate()\n    useEffect(() => {\n        if (marketplace) fetchNft()\n    }, [marketplace]);\n\n\n    // const [newPrice, setNewPrice] = useState(0);\n    const listNFTForSale = async () => {\n\n        await performActions(async (kit) => {\n            if (!nftData.price) {\n                return alert(\"Enter a valid price\")\n            }\n            const priceFormatted = (ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n            let transaction = await marketplace.methods.resellToken(id, priceFormatted).send({\n                from: address\n            })\n            alert(\"NFT listed for sale!\")\n\n            navigate(\"/\")\n        })\n\n\n\n    }\n\n    const fetchNft = async () => {\n        const tokenUri = await marketplace.methods.tokenURI(id).call()\n        let meta = await axios.get(tokenUri)\n        meta.data.owner =  await marketplace.methods.getNftOwner(id).call()\n        setNftData(meta.data)\n    }\n\n    const purchaseNft = async () => {\n\n        try {\n\n\n            await performActions(async (kit) => {\n                const {defaultAccount} = kit;\n                /* user will be prompted to pay the asking proces to complete the transaction */\n                const price = (ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n                const transaction = await marketplace.methods.createMarketSale(id).send({\n                    from: defaultAccount,\n                    value: price\n                })\n                alert(`You have successfully purchased this NFT!`)\n                navigate(`/profile`)\n            })\n        } catch (error) {\n            console.log({error});\n        }\n\n\n    }\n\n\n    return (\n        <div className='item section__padding'>\n            <div className=\"item-image\">\n                <img src={nftData.image} alt=\"item\"/>\n            </div>\n            <div className=\"item-content\">\n                <div className=\"item-content-title\">\n                    <h1>{nftData.name}</h1>\n                    <p>Costs <span>{nftData.price} CUSD</span> .</p>\n                </div>\n                <div className=\"item-content-creator\">\n                    <div><p>Creater</p></div>\n                    <div>\n                        <img src={\"https://beebom.com/wp-content/uploads/2022/02/Featured.jpg?w=750&quality=75\"}\n                             alt=\"creator\"/>\n                        <p>{nftData.owner || \"Anonymous\"}  </p>\n                    </div>\n                </div>\n                <div className=\"item-content-detail\">\n                    <p>{nftData.description}</p>\n                </div>\n\n                {nftData.owner == address ?\n                    <form className='writeForm' autoComplete='off' onSubmit={(e)=>e.preventDefault()}>\n\n                        <div className=\"formGroup\">\n                            {/*<input onChange={(e) => setNewPrice(e.target.value)} type=\"text\"*/}\n                            {/*       placeholder='New Price of NFT'*/}\n                            {/*       autoFocus={true}/>*/}\n                            <button className=\"primary-btn\"\n                                    onClick={listNFTForSale}>Relist NFT\n                            </button>\n\n                        </div>\n\n\n                    </form>\n\n                    :\n                    <div className=\"item-content-buy\">\n                        <button className=\"primary-btn\" onClick={purchaseNft}>Buy For {nftData.price} CUSD</button>\n                        {/*<button className=\"secondary-btn\">Make Offer</button>*/}\n                    </div>\n\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default ItemRelist;\n",["87","88"],"/home/tevin/Documents/tracker/hodler/src/pages/index.js",[],"/home/tevin/Documents/tracker/hodler/src/components/index.js",[],"/home/tevin/Documents/tracker/hodler/src/hooks/useMarketContract.js",[],"/home/tevin/Documents/tracker/hodler/src/pages/home/Home.jsx",["89","90","91","92"],"import React, {useEffect, useState} from 'react';\nimport {Nfts, Header, } from '../../components'\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\n\nconst Home = () => {\n\n    const {address, connect, performActions} = useContractKit()\n    const marketplace = useMarketContract()\n\n\n    const [nfts, setNfts] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        if(marketplace) loadNFTs()\n    }, [marketplace])\n    const loadNFTs = async ()  =>{\n        try {\n            const data = await marketplace.methods.fetchMarketItems().call()\n            const items = await Promise.all(data.map(async i => {\n                const tokenUri = await marketplace.methods.tokenURI(i.tokenId).call()\n                const meta = await axios.get(tokenUri)\n                let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n                return {\n                    price,\n                    tokenId: Number(i.tokenId),\n                    seller: i.seller,\n                    owner: i.owner,\n                    image: meta.data.image,\n                    name: meta.data.name\n                }\n            }))\n\n            setNfts(items)\n            setLoading(false)\n        }catch (e) {\n            console.log({e})\n        }finally {\n            setLoading(false)\n        }\n\n    }\n\n  return <div>\n   <Header />\n   <Nfts nfts={nfts} title=\"Hot NFts\" loading={loading}  />\n  </div>;\n};\n\nexport default Home;\n","/home/tevin/Documents/tracker/hodler/src/pages/item/Item.jsx",["93","94","95","96","97"],"import React, {useEffect, useState} from 'react';\nimport './item.css'\nimport creator from '../../assets/seller2.png'\nimport item from '../../assets/item1.png'\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\nimport {useParams} from \"react-router\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst Item = () => {\n\n    const {id} = useParams()\n    const marketplace = useMarketContract()\n    const [nftData, setNftData] = useState({});\n    const {address, performActions} = useContractKit()\n\n    const navigate = useNavigate()\n    useEffect(() => {\n        if (marketplace ) fetchNft()\n    }, [marketplace]);\n\n    const fetchNft = async () => {\n        const tokenUri = await marketplace.methods.tokenURI(id).call()\n        const meta = await axios.get(tokenUri)\n        setNftData(meta.data)\n    }\n\n    const purchaseNft = async () => {\n\n        try {\n\n\n        await performActions(async (kit) => {\n            const { defaultAccount } = kit;\n            /* user will be prompted to pay the asking proces to complete the transaction */\n            const price =( ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n            console.log({price})\n            const transaction = await marketplace.methods.createMarketSale(id).send({\n                from: defaultAccount,\n                value: price\n            })\n            alert(`You have successfully purchased this NFT!`)\n            navigate(`/profile`)\n        })\n        } catch (error) {\n            console.log({ error });\n        }\n\n\n    }\n\n    return (\n        <div className='item section__padding'>\n            <div className=\"item-image\">\n                <img src={nftData.image} alt=\"item\"/>\n            </div>\n            <div className=\"item-content\">\n                <div className=\"item-content-title\">\n                    <h1>{nftData.name}</h1>\n                    <p>Costs <span>{nftData.price} CUSD</span> .</p>\n                </div>\n                <div className=\"item-content-creator\">\n                    <div><p>Creater</p></div>\n                    <div>\n                        <img src={\"https://beebom.com/wp-content/uploads/2022/02/Featured.jpg?w=750&quality=75\"}\n                             alt=\"creator\"/>\n                        <p>{nftData.owner || \"Anonymous\"}  </p>\n                    </div>\n                </div>\n                <div className=\"item-content-detail\">\n                    <p>{nftData.description}</p>\n                </div>\n\n\n                <div className=\"item-content-buy\">\n                    <button className=\"primary-btn\" onClick={purchaseNft}>Buy For {nftData.price} CUSD</button>\n                    {/*<button className=\"secondary-btn\">Make Offer</button>*/}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Item;\n","/home/tevin/Documents/tracker/hodler/src/pages/profile/Profile.jsx",["98","99","100","101","102","103"],"import React, {useEffect, useState} from 'react';\nimport './profile.css'\nimport profile_banner from '../../assets/profile_banner.png'\nimport Nfts from '../../components/nfts/Nfts'\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\n\nconst Profile = () => {\n\n    const {address, connect, performActions} = useContractKit()\n    const marketplace = useMarketContract()\n\n\n    const [nfts, setNfts] = useState([]);\n    const [soldNfts, setSoldNfts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (marketplace) {\n            loadNFTs()\n        }\n    }, [ marketplace]);\n\n    const loadNFTs = async () => {\n        setLoading(true)\n        try {\n            const data = await marketplace.methods.fetchMyNFTs().call()\n            console.log({data})\n            const items = await Promise.all(data.map(async i => {\n                const tokenURI = await marketplace.methods.tokenURI(i.tokenId).call()\n\n                const owner = await marketplace.methods.getNftOwner(i.tokenId).call()\n                const meta = await axios.get(tokenURI)\n                let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n\n                return {\n                    price,\n                    tokenId: Number(i.tokenId),\n                    seller: i.seller,\n                    name: meta.data.name,\n                    owner,\n                    image: meta.data.image,\n                    tokenURI\n                }\n            }))\n\n            setNfts(items)\n        } catch (e) {\n            console.log({e})\n        } finally {\n            setLoading(false)\n        }\n\n\n    }\n\n\n    return (\n        <div className='profile section__padding'>\n            <div className=\"profile-top\">\n                <div className=\"profile-banner\">\n                    <img src={profile_banner} alt=\"banner\"/>\n                </div>\n                <div className=\"profile-pic\">\n                    <img\n                        src={\"https://www.kindpng.com/picc/m/78-785827_user-profile-avatar-login-account-male-user-icon.png\"}\n                        alt=\"profile\"/>\n                    <h3>Hello!</h3>\n                </div>\n            </div>\n            <div className=\"profile-bottom\">\n                {/*<div className=\"profile-bottom-input\">*/}\n                {/*  <input type=\"text\" placeholder='Search Item here' />*/}\n                {/*  <select>*/}\n                {/*    <option>Recently Listed</option>*/}\n                {/*    <option>Popular</option>*/}\n                {/*    <option>Low to High</option>*/}\n                {/*    <option>High to Low</option>*/}\n                {/*  </select>*/}\n                {/*</div>*/}\n                <Nfts nfts={nfts} loading={loading} title=\"Your Minted NFTs\" relist={true}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Profile;\n","/home/tevin/Documents/tracker/hodler/src/pages/create/Create.jsx",["104","105"],"import './create.css'\nimport Image from '../../assets/Image.png'\nimport {useEffect, useState} from \"react\";\nimport {create as ipfsHttpClient} from 'ipfs-http-client'\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {BigNumber, ethers} from \"ethers\";\n\nimport CircleLoader from \"react-spinners/ClipLoader\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\nconst Create = () => {\n    const {address, connect, performActions} = useContractKit()\n    const navigate = useNavigate();\n    useEffect(() => {\n\n        if (!address) {\n\n            (async () => {\n                await connect()\n            })()\n\n        }\n\n    }, [address, connect])\n\n\n    const [loading, setLoading] = useState(false)\n    const [image, setImage] = useState('')\n    const [price, setPrice] = useState(null)\n    const [category, setCategory] = useState('Art')\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n\n    const marketplace = useMarketContract()\n\n\n    const uploadToIPFS = async (event) => {\n        event.preventDefault()\n        const file = event.target.files[0]\n        if (typeof file !== 'undefined') {\n            try {\n                const result = await client.add(file)\n                console.log(result)\n                setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n            } catch (error) {\n                console.log(\"ipfs image upload error: \", error)\n            }\n        }\n    }\n\n    const isFormFiled = () => {\n        if (image === '' || price === null || category === '' || name === '' || description === '') {\n            return false\n        } else {\n            return true\n        }\n    }\n    const createNFT = async (e) => {\n        e.preventDefault()\n        try {\n            await performActions(async (kit) => {\n                const {defaultAccount} = kit;\n\n                if (!image || !price || !name || !description || !category) return\n\n                setLoading(true)\n                const result = await client.add(JSON.stringify({image, price, name, description, category, owner : address}))\n                await mintThenList(result, defaultAccount)\n\n            })\n\n        } catch (error) {\n            console.log(\"ipfs uri upload error: \", error)\n        } finally {\n            setLoading(false)\n        }\n    }\n    const mintThenList = async (result, defaultAccount) => {\n        const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n\n\n        const listingPrice = ethers.utils.parseEther(price.toString())\n\n\n        // mint nft\n       const tx =  await marketplace.methods.createToken(uri,listingPrice ).send({\n            from:defaultAccount\n        })\n\n\n        alert(\"Your nft was minted successfully!\")\n        navigate(`/`);\n\n    }\n\n    return (\n        <div className='create section__padding'>\n            <div className=\"create-container\">\n                <h1>Create new Item</h1>\n                <p className='upload-file'>Upload File</p>\n                <div className=\"upload-img-show\">\n                    <h3>JPG, PNG, GIF, SVG, WEBM, MP3, MP4. Max 100mb.</h3>\n                    <img src={Image} alt=\"banner\"/>\n                    <p>Drag and Drop File</p>\n                </div>\n                <form className='writeForm' autoComplete='off'>\n\n                    <div className=\"formGroup\">\n                        <label>Upload</label>\n                        <input onChange={uploadToIPFS} type=\"file\" className='custom-file-input'\n                        />\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>Name</label>\n                        <input onChange={(e) => setName(e.target.value)} type=\"text\" placeholder='Item Name'\n                               autoFocus={true}/>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>Description</label>\n                        <textarea onChange={(e) => setDescription(e.target.value)} type=\"text\" rows={4}\n                                  placeholder='Decription of your item'\n                        ></textarea>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>Price</label>\n                        <div className=\"twoForm\">\n                            <input onChange={(e) => setPrice(e.target.value)} type=\"text\" placeholder='Price'/>\n                            <select>\n                                <option value=\"CELO\">CELO</option>\n                                <option value=\"cUSD\">cUSD</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>Category</label>\n                        <select onChange={(e) => {\n                            console.log(e.target.value)\n                            setCategory(e.target.value)\n                        }}>\n                            <option>Art</option>\n                            <option>Photography</option>\n                            <option>Sports</option>\n                            <option>Collectibles</option>\n                            <option>Trading Cards</option>\n                            <option>Utility</option>\n                        </select>\n                    </div>\n                    {loading ?\n                        <div className={\"tw-text-center\"}>\n                            <CircleLoader color={\"white\"}/>\n                        </div>\n\n                        :\n                        <button disabled={!isFormFiled()} className='writeButton' onClick={createNFT}>Create\n                            Item</button>\n                    }\n\n\n                </form>\n            </div>\n        </div>\n\n    )\n};\n\nexport default Create;\n","/home/tevin/Documents/tracker/hodler/src/components/navbar/Navbar.jsx",[],"/home/tevin/Documents/tracker/hodler/src/components/header/Header.jsx",["106","107"],"import React from 'react'\nimport './header.css'\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nimport coin from '../../assets/coin.png'\nimport { Link  } from 'react-router-dom';\nconst Header = () => {\n  var settings = {\n    dots: false,\n    infinite: false,\n    speed: 500,\n    slidesToShow: 5,\n    slidesToScroll: 1,\n    initialSlide: 0,\n    swipeToSlide:true,\n    responsive: [\n      {\n        breakpoint: 1160,\n        settings: {\n          slidesToShow: 4,\n          slidesToScroll: 1,\n          swipeToSlide:true,\n        }\n      },\n      {\n        breakpoint: 950,\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 1,\n          swipeToSlide:true,\n        }\n      },\n      {\n        breakpoint: 750,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 1,\n          initialSlide: 2,\n        }\n      },\n      {\n        breakpoint: 550,\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 1\n        }\n      },\n      {\n        breakpoint: 470,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 1,\n        }\n      },\n      {\n        breakpoint: 400,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 1,\n          variableWidth: true,\n        }\n      }\n    ]\n  };\n  return (\n    <div className='header section__padding'>\n      <div className=\"header-content\">\n        <div>\n          <h1> CeloHodler is the easiest way to track your NFTs and Tokens.\n            </h1>\n          <img className='shake-vertical' src={coin} alt=\"\" />\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Header\n","/home/tevin/Documents/tracker/hodler/src/components/nfts/Nfts.jsx",["108","109","110","111","112","113","114"],"import React, {useEffect, useState} from 'react'\nimport './nfts.css'\nimport {AiFillHeart, AiOutlineHeart} from \"react-icons/ai\";\nimport {Link} from 'react-router-dom';\nimport {ClipLoader} from \"react-spinners\";\nimport {ethers} from \"ethers\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\n\nconst Nfts = ({title, nfts, loading, relist}) => {\n    console.log({nfts})\n\n    return (\n        <div className='bids section__padding'>\n            <div className=\"bids-container\">\n                <div className=\"bids-container-text\">\n                    {!loading && <h1>{nfts.length < 1 ? \"No NFTs Available\" : title}</h1>}\n\n                </div>\n                <div className=\"bids-container-card\">\n\n                    {loading && <ClipLoader color={\"white\"} size={200}/>}\n\n                    {nfts.map((nft) => (<Link to={ !relist ? `/nft/${nft.tokenId}` : `/nft/${nft.tokenId}/relist`}>\n                            <div className=\"card-column cursor-pointer\">\n                                <div className=\"bids-card\">\n                                    <div className=\"bids-card-top\">\n                                        <img src={nft.image} alt=\"\"/>\n\n                                        <p className=\"bids-title\">{nft.name}</p>\n\n                                    </div>\n                                    <div className=\"bids-card-bottom\">\n                                        <p>{nft.price} <span>cUsd</span></p>\n\n\n                                         </div>\n\n\n                                </div>\n\n\n                           <div>\n\n\n                           </div>\n                            </div>\n                        </Link>\n                    ))}\n\n\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Nfts\n","/home/tevin/Documents/tracker/hodler/src/hooks/useContract.js",[],"/home/tevin/Documents/tracker/hodler/src/utils/helpers.js",[],"/home/tevin/Documents/tracker/hodler/src/utils/constants.js",[],"/home/tevin/Documents/tracker/hodler/src/components/footer/Footer.jsx",["115","116","117","118"],"import React from 'react'\nimport './footer.css'\n\nimport { AiOutlineInstagram,AiOutlineTwitter, } from \"react-icons/ai\";\nimport { RiDiscordFill } from \"react-icons/ri\";\nimport { FaTelegramPlane } from \"react-icons/fa\";\nconst Footer = () => {\n  return (\n    <div className='footer section__padding'>\n      <div className=\"footer-links\">\n        <div className=\"footer-links_logo\">\n        <div>\n        \n          <p>CeloHodler</p>\n        </div>\n\n   </div>\n   </div>\n   </div>\n  )\n}\n\nexport default Footer","/home/tevin/Documents/tracker/hodler/src/pages/crypto/crypto.js",[],{"ruleId":"119","severity":1,"message":"120","line":20,"column":8,"nodeType":"121","endLine":20,"endColumn":21,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":31,"column":17,"nodeType":"125","messageId":"126","endLine":31,"endColumn":28},{"ruleId":"123","severity":1,"message":"124","line":59,"column":23,"nodeType":"125","messageId":"126","endLine":59,"endColumn":34},{"ruleId":"127","severity":1,"message":"128","line":96,"column":32,"nodeType":"129","messageId":"130","endLine":96,"endColumn":34},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"123","severity":1,"message":"135","line":10,"column":12,"nodeType":"125","messageId":"126","endLine":10,"endColumn":19},{"ruleId":"123","severity":1,"message":"136","line":10,"column":21,"nodeType":"125","messageId":"126","endLine":10,"endColumn":28},{"ruleId":"123","severity":1,"message":"137","line":10,"column":30,"nodeType":"125","messageId":"126","endLine":10,"endColumn":44},{"ruleId":"119","severity":1,"message":"138","line":19,"column":8,"nodeType":"121","endLine":19,"endColumn":21,"suggestions":"139"},{"ruleId":"123","severity":1,"message":"140","line":3,"column":8,"nodeType":"125","messageId":"126","endLine":3,"endColumn":15},{"ruleId":"123","severity":1,"message":"141","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":12},{"ruleId":"123","severity":1,"message":"135","line":17,"column":12,"nodeType":"125","messageId":"126","endLine":17,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":22,"column":8,"nodeType":"121","endLine":22,"endColumn":21,"suggestions":"142"},{"ruleId":"123","severity":1,"message":"124","line":40,"column":19,"nodeType":"125","messageId":"126","endLine":40,"endColumn":30},{"ruleId":"123","severity":1,"message":"135","line":12,"column":12,"nodeType":"125","messageId":"126","endLine":12,"endColumn":19},{"ruleId":"123","severity":1,"message":"136","line":12,"column":21,"nodeType":"125","messageId":"126","endLine":12,"endColumn":28},{"ruleId":"123","severity":1,"message":"137","line":12,"column":30,"nodeType":"125","messageId":"126","endLine":12,"endColumn":44},{"ruleId":"123","severity":1,"message":"143","line":17,"column":12,"nodeType":"125","messageId":"126","endLine":17,"endColumn":20},{"ruleId":"123","severity":1,"message":"144","line":17,"column":22,"nodeType":"125","messageId":"126","endLine":17,"endColumn":33},{"ruleId":"119","severity":1,"message":"138","line":24,"column":8,"nodeType":"121","endLine":24,"endColumn":22,"suggestions":"145"},{"ruleId":"123","severity":1,"message":"146","line":6,"column":9,"nodeType":"125","messageId":"126","endLine":6,"endColumn":18},{"ruleId":"123","severity":1,"message":"147","line":88,"column":14,"nodeType":"125","messageId":"126","endLine":88,"endColumn":16},{"ruleId":"123","severity":1,"message":"148","line":7,"column":10,"nodeType":"125","messageId":"126","endLine":7,"endColumn":14},{"ruleId":"123","severity":1,"message":"149","line":9,"column":7,"nodeType":"125","messageId":"126","endLine":9,"endColumn":15},{"ruleId":"123","severity":1,"message":"150","line":1,"column":16,"nodeType":"125","messageId":"126","endLine":1,"endColumn":25},{"ruleId":"123","severity":1,"message":"151","line":1,"column":27,"nodeType":"125","messageId":"126","endLine":1,"endColumn":35},{"ruleId":"123","severity":1,"message":"152","line":3,"column":9,"nodeType":"125","messageId":"126","endLine":3,"endColumn":20},{"ruleId":"123","severity":1,"message":"153","line":3,"column":22,"nodeType":"125","messageId":"126","endLine":3,"endColumn":36},{"ruleId":"123","severity":1,"message":"154","line":6,"column":9,"nodeType":"125","messageId":"126","endLine":6,"endColumn":15},{"ruleId":"123","severity":1,"message":"155","line":7,"column":9,"nodeType":"125","messageId":"126","endLine":7,"endColumn":26},{"ruleId":"123","severity":1,"message":"156","line":8,"column":9,"nodeType":"125","messageId":"126","endLine":8,"endColumn":23},{"ruleId":"123","severity":1,"message":"157","line":4,"column":10,"nodeType":"125","messageId":"126","endLine":4,"endColumn":28},{"ruleId":"123","severity":1,"message":"158","line":4,"column":29,"nodeType":"125","messageId":"126","endLine":4,"endColumn":45},{"ruleId":"123","severity":1,"message":"159","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":23},{"ruleId":"123","severity":1,"message":"160","line":6,"column":10,"nodeType":"125","messageId":"126","endLine":6,"endColumn":25},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchNft'. Either include it or remove the dependency array.","ArrayExpression",["161"],"no-unused-vars","'transaction' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["162"],"no-negated-in-lhs",["163"],"'address' is assigned a value but never used.","'connect' is assigned a value but never used.","'performActions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadNFTs'. Either include it or remove the dependency array.",["164"],"'creator' is defined but never used.","'item' is defined but never used.",["165"],"'soldNfts' is assigned a value but never used.","'setSoldNfts' is assigned a value but never used.",["166"],"'BigNumber' is defined but never used.","'tx' is assigned a value but never used.","'Link' is defined but never used.","'settings' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'AiFillHeart' is defined but never used.","'AiOutlineHeart' is defined but never used.","'ethers' is defined but never used.","'useMarketContract' is defined but never used.","'useContractKit' is defined but never used.","'AiOutlineInstagram' is defined but never used.","'AiOutlineTwitter' is defined but never used.","'RiDiscordFill' is defined but never used.","'FaTelegramPlane' is defined but never used.",{"desc":"167","fix":"168"},"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"167","fix":"171"},{"desc":"169","fix":"172"},"Update the dependencies array to be: [fetchNft, marketplace]",{"range":"173","text":"174"},"Update the dependencies array to be: [loadNFTs, marketplace]",{"range":"175","text":"176"},{"range":"177","text":"174"},{"range":"178","text":"176"},[651,664],"[fetchNft, marketplace]",[569,582],"[loadNFTs, marketplace]",[729,742],[732,746]]